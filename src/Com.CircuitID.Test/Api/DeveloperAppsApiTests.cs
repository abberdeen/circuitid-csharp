/*
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.17
 * Contact: support@circuitid.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Com.CircuitID.Client;
using Com.CircuitID.Api;
using Com.CircuitID.Models;

namespace Com.CircuitID.Test
{
    /// <summary>
    ///  Class for testing DeveloperAppsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DeveloperAppsApiTests
    {
        private DeveloperAppsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DeveloperAppsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DeveloperAppsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DeveloperAppsApi
            //Assert.IsInstanceOf(typeof(DeveloperAppsApi), instance);
        }

        
        /// <summary>
        /// Test CreateDeveloperApp
        /// </summary>
        [Test]
        public void CreateDeveloperAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Developerapps developerapps = null;
            //var response = instance.CreateDeveloperApp(developerapps);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test FindDeveloperApps
        /// </summary>
        [Test]
        public void FindDeveloperAppsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object search = null;
            //Object limit = null;
            //Object skip = null;
            //Object sort = null;
            //Object select = null;
            //Object or = null;
            //Object and = null;
            //var response = instance.FindDeveloperApps(search, limit, skip, sort, select, or, and);
            //Assert.IsInstanceOf(typeof(FindDeveloperApps200Response), response, "response is FindDeveloperApps200Response");
        }
        
        /// <summary>
        /// Test GetDeveloperApp
        /// </summary>
        [Test]
        public void GetDeveloperAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object id = null;
            //var response = instance.GetDeveloperApp(id);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test PatchDeveloperApp
        /// </summary>
        [Test]
        public void PatchDeveloperAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object id = null;
            //Developerapps developerapps = null;
            //var response = instance.PatchDeveloperApp(id, developerapps);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test RemoveDeveloperApp
        /// </summary>
        [Test]
        public void RemoveDeveloperAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object id = null;
            //var response = instance.RemoveDeveloperApp(id);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
    }

}

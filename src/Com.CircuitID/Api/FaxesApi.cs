/*
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.20
 * Contact: support@circuitid.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Com.CircuitID.Client;
using Com.CircuitID.Models;

namespace Com.CircuitID.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFaxesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new object
        /// </summary>
        /// <remarks>
        /// Add a new object to the system.
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxesCreateOrPatch">The JSON object that will be posted to the REST API endpoint.</param>
        /// <returns>GetFax200Response</returns>
        GetFax200Response CreateFax (FaxesCreateOrPatch faxesCreateOrPatch);

        /// <summary>
        /// Create a new object
        /// </summary>
        /// <remarks>
        /// Add a new object to the system.
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxesCreateOrPatch">The JSON object that will be posted to the REST API endpoint.</param>
        /// <returns>ApiResponse of GetFax200Response</returns>
        ApiResponse<GetFax200Response> CreateFaxWithHttpInfo (FaxesCreateOrPatch faxesCreateOrPatch);
        /// <summary>
        /// Find multiple objects
        /// </summary>
        /// <remarks>
        /// Search and retrieve multiple objects simultaneously. 
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter results by the specified value. (optional)</param>
        /// <param name="limit">$limit will return only the number of results you specify. (optional)</param>
        /// <param name="skip">$skip will skip the specified number of results. (optional)</param>
        /// <param name="sort">$sort will sort based on the object you provide. It can contain a list of properties by which to sort mapped to the order (1 ascending, -1 descending). (optional)</param>
        /// <param name="select">$select allows to pick which fields to include in the result. (optional)</param>
        /// <param name="or">Find all records that match any of the given criteria. (optional)</param>
        /// <param name="and">Find all records that match all of the given criteria. (optional)</param>
        /// <returns>FindFaxes200Response</returns>
        FindFaxes200Response FindFaxes (string search = default(string), int? limit = default(int?), int? skip = default(int?), Object sort = default(Object), List<string> select = default(List<string>), List<Object> or = default(List<Object>), List<Object> and = default(List<Object>));

        /// <summary>
        /// Find multiple objects
        /// </summary>
        /// <remarks>
        /// Search and retrieve multiple objects simultaneously. 
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter results by the specified value. (optional)</param>
        /// <param name="limit">$limit will return only the number of results you specify. (optional)</param>
        /// <param name="skip">$skip will skip the specified number of results. (optional)</param>
        /// <param name="sort">$sort will sort based on the object you provide. It can contain a list of properties by which to sort mapped to the order (1 ascending, -1 descending). (optional)</param>
        /// <param name="select">$select allows to pick which fields to include in the result. (optional)</param>
        /// <param name="or">Find all records that match any of the given criteria. (optional)</param>
        /// <param name="and">Find all records that match all of the given criteria. (optional)</param>
        /// <returns>ApiResponse of FindFaxes200Response</returns>
        ApiResponse<FindFaxes200Response> FindFaxesWithHttpInfo (string search = default(string), int? limit = default(int?), int? skip = default(int?), Object sort = default(Object), List<string> select = default(List<string>), List<Object> or = default(List<Object>), List<Object> and = default(List<Object>));
        /// <summary>
        /// Get object by id
        /// </summary>
        /// <remarks>
        /// Get an object from the REST API Endpoint by its unique id.
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <returns>GetFax200Response</returns>
        GetFax200Response GetFax (string id);

        /// <summary>
        /// Get object by id
        /// </summary>
        /// <remarks>
        /// Get an object from the REST API Endpoint by its unique id.
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <returns>ApiResponse of GetFax200Response</returns>
        ApiResponse<GetFax200Response> GetFaxWithHttpInfo (string id);
        /// <summary>
        /// Delete object by id
        /// </summary>
        /// <remarks>
        /// Delete an object by id, removing it from the service.
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <returns>GetFax200Response</returns>
        GetFax200Response RemoveFax (string id);

        /// <summary>
        /// Delete object by id
        /// </summary>
        /// <remarks>
        /// Delete an object by id, removing it from the service.
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <returns>ApiResponse of GetFax200Response</returns>
        ApiResponse<GetFax200Response> RemoveFaxWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new object
        /// </summary>
        /// <remarks>
        /// Add a new object to the system.
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxesCreateOrPatch">The JSON object that will be posted to the REST API endpoint.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetFax200Response</returns>
        System.Threading.Tasks.Task<GetFax200Response> CreateFaxAsync (FaxesCreateOrPatch faxesCreateOrPatch, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new object
        /// </summary>
        /// <remarks>
        /// Add a new object to the system.
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxesCreateOrPatch">The JSON object that will be posted to the REST API endpoint.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetFax200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFax200Response>> CreateFaxWithHttpInfoAsync (FaxesCreateOrPatch faxesCreateOrPatch, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find multiple objects
        /// </summary>
        /// <remarks>
        /// Search and retrieve multiple objects simultaneously. 
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter results by the specified value. (optional)</param>
        /// <param name="limit">$limit will return only the number of results you specify. (optional)</param>
        /// <param name="skip">$skip will skip the specified number of results. (optional)</param>
        /// <param name="sort">$sort will sort based on the object you provide. It can contain a list of properties by which to sort mapped to the order (1 ascending, -1 descending). (optional)</param>
        /// <param name="select">$select allows to pick which fields to include in the result. (optional)</param>
        /// <param name="or">Find all records that match any of the given criteria. (optional)</param>
        /// <param name="and">Find all records that match all of the given criteria. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FindFaxes200Response</returns>
        System.Threading.Tasks.Task<FindFaxes200Response> FindFaxesAsync (string search = default(string), int? limit = default(int?), int? skip = default(int?), Object sort = default(Object), List<string> select = default(List<string>), List<Object> or = default(List<Object>), List<Object> and = default(List<Object>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find multiple objects
        /// </summary>
        /// <remarks>
        /// Search and retrieve multiple objects simultaneously. 
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter results by the specified value. (optional)</param>
        /// <param name="limit">$limit will return only the number of results you specify. (optional)</param>
        /// <param name="skip">$skip will skip the specified number of results. (optional)</param>
        /// <param name="sort">$sort will sort based on the object you provide. It can contain a list of properties by which to sort mapped to the order (1 ascending, -1 descending). (optional)</param>
        /// <param name="select">$select allows to pick which fields to include in the result. (optional)</param>
        /// <param name="or">Find all records that match any of the given criteria. (optional)</param>
        /// <param name="and">Find all records that match all of the given criteria. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FindFaxes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindFaxes200Response>> FindFaxesWithHttpInfoAsync (string search = default(string), int? limit = default(int?), int? skip = default(int?), Object sort = default(Object), List<string> select = default(List<string>), List<Object> or = default(List<Object>), List<Object> and = default(List<Object>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get object by id
        /// </summary>
        /// <remarks>
        /// Get an object from the REST API Endpoint by its unique id.
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetFax200Response</returns>
        System.Threading.Tasks.Task<GetFax200Response> GetFaxAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get object by id
        /// </summary>
        /// <remarks>
        /// Get an object from the REST API Endpoint by its unique id.
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetFax200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFax200Response>> GetFaxWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete object by id
        /// </summary>
        /// <remarks>
        /// Delete an object by id, removing it from the service.
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetFax200Response</returns>
        System.Threading.Tasks.Task<GetFax200Response> RemoveFaxAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete object by id
        /// </summary>
        /// <remarks>
        /// Delete an object by id, removing it from the service.
        /// </remarks>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetFax200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFax200Response>> RemoveFaxWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FaxesApi : IFaxesApi
    {
        private Com.CircuitID.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FaxesApi(String basePath)
        {
            this.Configuration = new Com.CircuitID.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.CircuitID.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxesApi"/> class
        /// </summary>
        /// <returns></returns>
        public FaxesApi()
        {
            this.Configuration = Com.CircuitID.Client.Configuration.Default;

            ExceptionFactory = Com.CircuitID.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FaxesApi(Com.CircuitID.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.CircuitID.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.CircuitID.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.CircuitID.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.CircuitID.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new object Add a new object to the system.
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxesCreateOrPatch">The JSON object that will be posted to the REST API endpoint.</param>
        /// <returns>GetFax200Response</returns>
        public GetFax200Response CreateFax (FaxesCreateOrPatch faxesCreateOrPatch)
        {
             ApiResponse<GetFax200Response> localVarResponse = CreateFaxWithHttpInfo(faxesCreateOrPatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new object Add a new object to the system.
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxesCreateOrPatch">The JSON object that will be posted to the REST API endpoint.</param>
        /// <returns>ApiResponse of GetFax200Response</returns>
        public ApiResponse<GetFax200Response> CreateFaxWithHttpInfo (FaxesCreateOrPatch faxesCreateOrPatch)
        {
            // verify the required parameter 'faxesCreateOrPatch' is set
            if (faxesCreateOrPatch == null)
                throw new ApiException(400, "Missing required parameter 'faxesCreateOrPatch' when calling FaxesApi->CreateFax");

            var localVarPath = "/faxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (faxesCreateOrPatch != null && faxesCreateOrPatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(faxesCreateOrPatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = faxesCreateOrPatch; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFax", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFax200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetFax200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFax200Response)));
        }

        /// <summary>
        /// Create a new object Add a new object to the system.
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxesCreateOrPatch">The JSON object that will be posted to the REST API endpoint.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetFax200Response</returns>
        public async System.Threading.Tasks.Task<GetFax200Response> CreateFaxAsync (FaxesCreateOrPatch faxesCreateOrPatch, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetFax200Response> localVarResponse = await CreateFaxWithHttpInfoAsync(faxesCreateOrPatch, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new object Add a new object to the system.
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="faxesCreateOrPatch">The JSON object that will be posted to the REST API endpoint.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetFax200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFax200Response>> CreateFaxWithHttpInfoAsync (FaxesCreateOrPatch faxesCreateOrPatch, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'faxesCreateOrPatch' is set
            if (faxesCreateOrPatch == null)
                throw new ApiException(400, "Missing required parameter 'faxesCreateOrPatch' when calling FaxesApi->CreateFax");

            var localVarPath = "/faxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (faxesCreateOrPatch != null && faxesCreateOrPatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(faxesCreateOrPatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = faxesCreateOrPatch; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFax", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFax200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetFax200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFax200Response)));
        }

        /// <summary>
        /// Find multiple objects Search and retrieve multiple objects simultaneously. 
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter results by the specified value. (optional)</param>
        /// <param name="limit">$limit will return only the number of results you specify. (optional)</param>
        /// <param name="skip">$skip will skip the specified number of results. (optional)</param>
        /// <param name="sort">$sort will sort based on the object you provide. It can contain a list of properties by which to sort mapped to the order (1 ascending, -1 descending). (optional)</param>
        /// <param name="select">$select allows to pick which fields to include in the result. (optional)</param>
        /// <param name="or">Find all records that match any of the given criteria. (optional)</param>
        /// <param name="and">Find all records that match all of the given criteria. (optional)</param>
        /// <returns>FindFaxes200Response</returns>
        public FindFaxes200Response FindFaxes (string search = default(string), int? limit = default(int?), int? skip = default(int?), Object sort = default(Object), List<string> select = default(List<string>), List<Object> or = default(List<Object>), List<Object> and = default(List<Object>))
        {
             ApiResponse<FindFaxes200Response> localVarResponse = FindFaxesWithHttpInfo(search, limit, skip, sort, select, or, and);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find multiple objects Search and retrieve multiple objects simultaneously. 
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter results by the specified value. (optional)</param>
        /// <param name="limit">$limit will return only the number of results you specify. (optional)</param>
        /// <param name="skip">$skip will skip the specified number of results. (optional)</param>
        /// <param name="sort">$sort will sort based on the object you provide. It can contain a list of properties by which to sort mapped to the order (1 ascending, -1 descending). (optional)</param>
        /// <param name="select">$select allows to pick which fields to include in the result. (optional)</param>
        /// <param name="or">Find all records that match any of the given criteria. (optional)</param>
        /// <param name="and">Find all records that match all of the given criteria. (optional)</param>
        /// <returns>ApiResponse of FindFaxes200Response</returns>
        public ApiResponse<FindFaxes200Response> FindFaxesWithHttpInfo (string search = default(string), int? limit = default(int?), int? skip = default(int?), Object sort = default(Object), List<string> select = default(List<string>), List<Object> or = default(List<Object>), List<Object> and = default(List<Object>))
        {

            var localVarPath = "/faxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$search", search)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$limit", limit)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$sort", sort)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "$select", select)); // query parameter
            if (or != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "$or", or)); // query parameter
            if (and != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "$and", and)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFaxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FindFaxes200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FindFaxes200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FindFaxes200Response)));
        }

        /// <summary>
        /// Find multiple objects Search and retrieve multiple objects simultaneously. 
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter results by the specified value. (optional)</param>
        /// <param name="limit">$limit will return only the number of results you specify. (optional)</param>
        /// <param name="skip">$skip will skip the specified number of results. (optional)</param>
        /// <param name="sort">$sort will sort based on the object you provide. It can contain a list of properties by which to sort mapped to the order (1 ascending, -1 descending). (optional)</param>
        /// <param name="select">$select allows to pick which fields to include in the result. (optional)</param>
        /// <param name="or">Find all records that match any of the given criteria. (optional)</param>
        /// <param name="and">Find all records that match all of the given criteria. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FindFaxes200Response</returns>
        public async System.Threading.Tasks.Task<FindFaxes200Response> FindFaxesAsync (string search = default(string), int? limit = default(int?), int? skip = default(int?), Object sort = default(Object), List<string> select = default(List<string>), List<Object> or = default(List<Object>), List<Object> and = default(List<Object>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FindFaxes200Response> localVarResponse = await FindFaxesWithHttpInfoAsync(search, limit, skip, sort, select, or, and, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find multiple objects Search and retrieve multiple objects simultaneously. 
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Filter results by the specified value. (optional)</param>
        /// <param name="limit">$limit will return only the number of results you specify. (optional)</param>
        /// <param name="skip">$skip will skip the specified number of results. (optional)</param>
        /// <param name="sort">$sort will sort based on the object you provide. It can contain a list of properties by which to sort mapped to the order (1 ascending, -1 descending). (optional)</param>
        /// <param name="select">$select allows to pick which fields to include in the result. (optional)</param>
        /// <param name="or">Find all records that match any of the given criteria. (optional)</param>
        /// <param name="and">Find all records that match all of the given criteria. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FindFaxes200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FindFaxes200Response>> FindFaxesWithHttpInfoAsync (string search = default(string), int? limit = default(int?), int? skip = default(int?), Object sort = default(Object), List<string> select = default(List<string>), List<Object> or = default(List<Object>), List<Object> and = default(List<Object>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/faxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$search", search)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$limit", limit)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$sort", sort)); // query parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "$select", select)); // query parameter
            if (or != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "$or", or)); // query parameter
            if (and != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "$and", and)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFaxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FindFaxes200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FindFaxes200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FindFaxes200Response)));
        }

        /// <summary>
        /// Get object by id Get an object from the REST API Endpoint by its unique id.
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <returns>GetFax200Response</returns>
        public GetFax200Response GetFax (string id)
        {
             ApiResponse<GetFax200Response> localVarResponse = GetFaxWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get object by id Get an object from the REST API Endpoint by its unique id.
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <returns>ApiResponse of GetFax200Response</returns>
        public ApiResponse<GetFax200Response> GetFaxWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FaxesApi->GetFax");

            var localVarPath = "/faxes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFax", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFax200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetFax200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFax200Response)));
        }

        /// <summary>
        /// Get object by id Get an object from the REST API Endpoint by its unique id.
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetFax200Response</returns>
        public async System.Threading.Tasks.Task<GetFax200Response> GetFaxAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetFax200Response> localVarResponse = await GetFaxWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get object by id Get an object from the REST API Endpoint by its unique id.
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetFax200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFax200Response>> GetFaxWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FaxesApi->GetFax");

            var localVarPath = "/faxes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFax", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFax200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetFax200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFax200Response)));
        }

        /// <summary>
        /// Delete object by id Delete an object by id, removing it from the service.
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <returns>GetFax200Response</returns>
        public GetFax200Response RemoveFax (string id)
        {
             ApiResponse<GetFax200Response> localVarResponse = RemoveFaxWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete object by id Delete an object by id, removing it from the service.
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <returns>ApiResponse of GetFax200Response</returns>
        public ApiResponse<GetFax200Response> RemoveFaxWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FaxesApi->RemoveFax");

            var localVarPath = "/faxes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveFax", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFax200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetFax200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFax200Response)));
        }

        /// <summary>
        /// Delete object by id Delete an object by id, removing it from the service.
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetFax200Response</returns>
        public async System.Threading.Tasks.Task<GetFax200Response> RemoveFaxAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetFax200Response> localVarResponse = await RemoveFaxWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete object by id Delete an object by id, removing it from the service.
        /// </summary>
        /// <exception cref="Com.CircuitID.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ObjectId (unique 12 bytes ID) of record you would like to GET.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetFax200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFax200Response>> RemoveFaxWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FaxesApi->RemoveFax");

            var localVarPath = "/faxes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveFax", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFax200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetFax200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFax200Response)));
        }

    }
}

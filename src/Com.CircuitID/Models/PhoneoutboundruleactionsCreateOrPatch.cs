/*
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.22
 * Contact: support@circuitid.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.CircuitID.Client.OpenAPIDateConverter;

namespace Com.CircuitID.Models
{
    /// <summary>
    /// PhoneoutboundruleactionsCreateOrPatch
    /// </summary>
    [DataContract]
    public partial class PhoneoutboundruleactionsCreateOrPatch :  IEquatable<PhoneoutboundruleactionsCreateOrPatch>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0

        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines LengthType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LengthTypeEnum
        {
            /// <summary>
            /// Enum Atleast for value: atleast
            /// </summary>
            [EnumMember(Value = "atleast")]
            Atleast = 1,

            /// <summary>
            /// Enum Exactly for value: exactly
            /// </summary>
            [EnumMember(Value = "exactly")]
            Exactly = 2,

            /// <summary>
            /// Enum Range for value: range
            /// </summary>
            [EnumMember(Value = "range")]
            Range = 3,

            /// <summary>
            /// Enum Any for value: any
            /// </summary>
            [EnumMember(Value = "any")]
            Any = 4

        }

        /// <summary>
        /// Gets or Sets LengthType
        /// </summary>
        [DataMember(Name="lengthType", EmitDefaultValue=true)]
        public LengthTypeEnum? LengthType { get; set; }
        /// <summary>
        /// Defines Route
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RouteEnum
        {
            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 1,

            /// <summary>
            /// Enum Group for value: group
            /// </summary>
            [EnumMember(Value = "group")]
            Group = 2,

            /// <summary>
            /// Enum Pstn for value: pstn
            /// </summary>
            [EnumMember(Value = "pstn")]
            Pstn = 3

        }

        /// <summary>
        /// Gets or Sets Route
        /// </summary>
        [DataMember(Name="route", EmitDefaultValue=true)]
        public RouteEnum Route { get; set; }
        /// <summary>
        /// Defines RoutingType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoutingTypeEnum
        {
            /// <summary>
            /// Enum Priority for value: priority
            /// </summary>
            [EnumMember(Value = "priority")]
            Priority = 1,

            /// <summary>
            /// Enum Lb for value: lb
            /// </summary>
            [EnumMember(Value = "lb")]
            Lb = 2,

            /// <summary>
            /// Enum Simultaneous for value: simultaneous
            /// </summary>
            [EnumMember(Value = "simultaneous")]
            Simultaneous = 3

        }

        /// <summary>
        /// Gets or Sets RoutingType
        /// </summary>
        [DataMember(Name="routingType", EmitDefaultValue=false)]
        public RoutingTypeEnum? RoutingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneoutboundruleactionsCreateOrPatch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhoneoutboundruleactionsCreateOrPatch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneoutboundruleactionsCreateOrPatch" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="group">ObjectId (unique 12 bytes ID).</param>
        /// <param name="phoneoutboundrule">ObjectId (unique 12 bytes ID) (required).</param>
        /// <param name="status">status (default to StatusEnum.NUMBER_1).</param>
        /// <param name="priority">priority (required) (default to 1).</param>
        /// <param name="startingChars">startingChars.</param>
        /// <param name="contains">contains.</param>
        /// <param name="lengthType">lengthType.</param>
        /// <param name="length">length.</param>
        /// <param name="appendChars">appendChars.</param>
        /// <param name="prependChars">prependChars.</param>
        /// <param name="rangeStart">rangeStart.</param>
        /// <param name="rangeEnd">rangeEnd.</param>
        /// <param name="removeStartingChars">removeStartingChars.</param>
        /// <param name="removeEndingChars">removeEndingChars.</param>
        /// <param name="route">route (required) (default to RouteEnum.Default).</param>
        /// <param name="routingType">routingType.</param>
        public PhoneoutboundruleactionsCreateOrPatch(string name = default(string), string group = default(string), string phoneoutboundrule = default(string), StatusEnum? status = StatusEnum.NUMBER_1, int priority = 1, string startingChars = default(string), string contains = default(string), LengthTypeEnum? lengthType = default(LengthTypeEnum?), int length = default(int), string appendChars = default(string), string prependChars = default(string), int rangeStart = default(int), int rangeEnd = default(int), int removeStartingChars = default(int), int removeEndingChars = default(int), RouteEnum route = RouteEnum.Default, RoutingTypeEnum? routingType = default(RoutingTypeEnum?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for PhoneoutboundruleactionsCreateOrPatch and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "phoneoutboundrule" is required (not null)
            if (phoneoutboundrule == null)
            {
                throw new InvalidDataException("phoneoutboundrule is a required property for PhoneoutboundruleactionsCreateOrPatch and cannot be null");
            }
            else
            {
                this.Phoneoutboundrule = phoneoutboundrule;
            }

            // to ensure "priority" is required (not null)
            if (priority == null)
            {
                throw new InvalidDataException("priority is a required property for PhoneoutboundruleactionsCreateOrPatch and cannot be null");
            }
            else
            {
                this.Priority = priority;
            }

            this.LengthType = lengthType;
            // to ensure "route" is required (not null)
            if (route == null)
            {
                throw new InvalidDataException("route is a required property for PhoneoutboundruleactionsCreateOrPatch and cannot be null");
            }
            else
            {
                this.Route = route;
            }

            this.Group = group;
            // use default value if no "status" provided
            if (status == null)
            {
                this.Status = StatusEnum.NUMBER_1;
            }
            else
            {
                this.Status = status;
            }
            this.StartingChars = startingChars;
            this.Contains = contains;
            this.LengthType = lengthType;
            this.Length = length;
            this.AppendChars = appendChars;
            this.PrependChars = prependChars;
            this.RangeStart = rangeStart;
            this.RangeEnd = rangeEnd;
            this.RemoveStartingChars = removeStartingChars;
            this.RemoveEndingChars = removeEndingChars;
            this.RoutingType = routingType;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="phoneoutboundrule", EmitDefaultValue=true)]
        public string Phoneoutboundrule { get; set; }


        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=true)]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or Sets StartingChars
        /// </summary>
        [DataMember(Name="startingChars", EmitDefaultValue=false)]
        public string StartingChars { get; set; }

        /// <summary>
        /// Gets or Sets Contains
        /// </summary>
        [DataMember(Name="contains", EmitDefaultValue=false)]
        public string Contains { get; set; }


        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public int Length { get; set; }

        /// <summary>
        /// Gets or Sets AppendChars
        /// </summary>
        [DataMember(Name="appendChars", EmitDefaultValue=false)]
        public string AppendChars { get; set; }

        /// <summary>
        /// Gets or Sets PrependChars
        /// </summary>
        [DataMember(Name="prependChars", EmitDefaultValue=false)]
        public string PrependChars { get; set; }

        /// <summary>
        /// Gets or Sets RangeStart
        /// </summary>
        [DataMember(Name="rangeStart", EmitDefaultValue=false)]
        public int RangeStart { get; set; }

        /// <summary>
        /// Gets or Sets RangeEnd
        /// </summary>
        [DataMember(Name="rangeEnd", EmitDefaultValue=false)]
        public int RangeEnd { get; set; }

        /// <summary>
        /// Gets or Sets RemoveStartingChars
        /// </summary>
        [DataMember(Name="removeStartingChars", EmitDefaultValue=false)]
        public int RemoveStartingChars { get; set; }

        /// <summary>
        /// Gets or Sets RemoveEndingChars
        /// </summary>
        [DataMember(Name="removeEndingChars", EmitDefaultValue=false)]
        public int RemoveEndingChars { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhoneoutboundruleactionsCreateOrPatch {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Phoneoutboundrule: ").Append(Phoneoutboundrule).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  StartingChars: ").Append(StartingChars).Append("\n");
            sb.Append("  Contains: ").Append(Contains).Append("\n");
            sb.Append("  LengthType: ").Append(LengthType).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  AppendChars: ").Append(AppendChars).Append("\n");
            sb.Append("  PrependChars: ").Append(PrependChars).Append("\n");
            sb.Append("  RangeStart: ").Append(RangeStart).Append("\n");
            sb.Append("  RangeEnd: ").Append(RangeEnd).Append("\n");
            sb.Append("  RemoveStartingChars: ").Append(RemoveStartingChars).Append("\n");
            sb.Append("  RemoveEndingChars: ").Append(RemoveEndingChars).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("  RoutingType: ").Append(RoutingType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhoneoutboundruleactionsCreateOrPatch);
        }

        /// <summary>
        /// Returns true if PhoneoutboundruleactionsCreateOrPatch instances are equal
        /// </summary>
        /// <param name="input">Instance of PhoneoutboundruleactionsCreateOrPatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhoneoutboundruleactionsCreateOrPatch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Phoneoutboundrule == input.Phoneoutboundrule ||
                    (this.Phoneoutboundrule != null &&
                    this.Phoneoutboundrule.Equals(input.Phoneoutboundrule))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.StartingChars == input.StartingChars ||
                    (this.StartingChars != null &&
                    this.StartingChars.Equals(input.StartingChars))
                ) && 
                (
                    this.Contains == input.Contains ||
                    (this.Contains != null &&
                    this.Contains.Equals(input.Contains))
                ) && 
                (
                    this.LengthType == input.LengthType ||
                    (this.LengthType != null &&
                    this.LengthType.Equals(input.LengthType))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.AppendChars == input.AppendChars ||
                    (this.AppendChars != null &&
                    this.AppendChars.Equals(input.AppendChars))
                ) && 
                (
                    this.PrependChars == input.PrependChars ||
                    (this.PrependChars != null &&
                    this.PrependChars.Equals(input.PrependChars))
                ) && 
                (
                    this.RangeStart == input.RangeStart ||
                    (this.RangeStart != null &&
                    this.RangeStart.Equals(input.RangeStart))
                ) && 
                (
                    this.RangeEnd == input.RangeEnd ||
                    (this.RangeEnd != null &&
                    this.RangeEnd.Equals(input.RangeEnd))
                ) && 
                (
                    this.RemoveStartingChars == input.RemoveStartingChars ||
                    (this.RemoveStartingChars != null &&
                    this.RemoveStartingChars.Equals(input.RemoveStartingChars))
                ) && 
                (
                    this.RemoveEndingChars == input.RemoveEndingChars ||
                    (this.RemoveEndingChars != null &&
                    this.RemoveEndingChars.Equals(input.RemoveEndingChars))
                ) && 
                (
                    this.Route == input.Route ||
                    (this.Route != null &&
                    this.Route.Equals(input.Route))
                ) && 
                (
                    this.RoutingType == input.RoutingType ||
                    (this.RoutingType != null &&
                    this.RoutingType.Equals(input.RoutingType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Phoneoutboundrule != null)
                    hashCode = hashCode * 59 + this.Phoneoutboundrule.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.StartingChars != null)
                    hashCode = hashCode * 59 + this.StartingChars.GetHashCode();
                if (this.Contains != null)
                    hashCode = hashCode * 59 + this.Contains.GetHashCode();
                if (this.LengthType != null)
                    hashCode = hashCode * 59 + this.LengthType.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.AppendChars != null)
                    hashCode = hashCode * 59 + this.AppendChars.GetHashCode();
                if (this.PrependChars != null)
                    hashCode = hashCode * 59 + this.PrependChars.GetHashCode();
                if (this.RangeStart != null)
                    hashCode = hashCode * 59 + this.RangeStart.GetHashCode();
                if (this.RangeEnd != null)
                    hashCode = hashCode * 59 + this.RangeEnd.GetHashCode();
                if (this.RemoveStartingChars != null)
                    hashCode = hashCode * 59 + this.RemoveStartingChars.GetHashCode();
                if (this.RemoveEndingChars != null)
                    hashCode = hashCode * 59 + this.RemoveEndingChars.GetHashCode();
                if (this.Route != null)
                    hashCode = hashCode * 59 + this.Route.GetHashCode();
                if (this.RoutingType != null)
                    hashCode = hashCode * 59 + this.RoutingType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 45.", new [] { "Name" });
            }


            // StartingChars (string) maxLength
            if(this.StartingChars != null && this.StartingChars.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartingChars, length must be less than 20.", new [] { "StartingChars" });
            }


            // Contains (string) maxLength
            if(this.Contains != null && this.Contains.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Contains, length must be less than 20.", new [] { "Contains" });
            }


            // AppendChars (string) maxLength
            if(this.AppendChars != null && this.AppendChars.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AppendChars, length must be less than 20.", new [] { "AppendChars" });
            }


            // PrependChars (string) maxLength
            if(this.PrependChars != null && this.PrependChars.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrependChars, length must be less than 20.", new [] { "PrependChars" });
            }


            yield break;
        }
    }

}

/*
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.15
 * Contact: support@circuitid.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.CircuitID.Client.OpenAPIDateConverter;

namespace Com.CircuitID.Models
{
    /// <summary>
    /// Users
    /// </summary>
    [DataContract]
    public partial class Users :  IEquatable<Users>, IValidatableObject
    {
        /// <summary>
        /// Defines Language
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            Fr = fr,

            /// <summary>
            /// Enum En for value: en
            /// </summary>
            En = en,

            /// <summary>
            /// Enum Ja for value: ja
            /// </summary>
            Ja = ja,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            De = de,

            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            Es = es

        }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=true)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Defines IsPrimary
        /// </summary>
        public enum IsPrimaryEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 0

        }

        /// <summary>
        /// Gets or Sets IsPrimary
        /// </summary>
        [DataMember(Name="isPrimary", EmitDefaultValue=true)]
        public IsPrimaryEnum? IsPrimary { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            Active = active,

            /// <summary>
            /// Enum Disabled for value: disabled
            /// </summary>
            Disabled = disabled,

            /// <summary>
            /// Enum Terminated for value: terminated
            /// </summary>
            Terminated = terminated

        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines VmGreetingType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VmGreetingTypeEnum
        {
            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            Default = default,

            /// <summary>
            /// Enum Mp3 for value: mp3
            /// </summary>
            Mp3 = mp3,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            Number = number

        }

        /// <summary>
        /// Gets or Sets VmGreetingType
        /// </summary>
        [DataMember(Name="vmGreetingType", EmitDefaultValue=true)]
        public VmGreetingTypeEnum? VmGreetingType { get; set; }
        /// <summary>
        /// Defines AdminPermission
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AdminPermissionEnum
        {
            /// <summary>
            /// Enum R for value: r
            /// </summary>
            R = r,

            /// <summary>
            /// Enum Rw for value: rw
            /// </summary>
            Rw = rw,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            Null = null

        }

        /// <summary>
        /// Gets or Sets AdminPermission
        /// </summary>
        [DataMember(Name="adminPermission", EmitDefaultValue=true)]
        public AdminPermissionEnum? AdminPermission { get; set; }
        /// <summary>
        /// Defines BillingPermission
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BillingPermissionEnum
        {
            /// <summary>
            /// Enum R for value: r
            /// </summary>
            R = r,

            /// <summary>
            /// Enum Rw for value: rw
            /// </summary>
            Rw = rw,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            Null = null

        }

        /// <summary>
        /// Gets or Sets BillingPermission
        /// </summary>
        [DataMember(Name="billingPermission", EmitDefaultValue=true)]
        public BillingPermissionEnum? BillingPermission { get; set; }
        /// <summary>
        /// Defines PhonePermission
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PhonePermissionEnum
        {
            /// <summary>
            /// Enum R for value: r
            /// </summary>
            R = r,

            /// <summary>
            /// Enum Rw for value: rw
            /// </summary>
            Rw = rw,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            Null = null

        }

        /// <summary>
        /// Gets or Sets PhonePermission
        /// </summary>
        [DataMember(Name="phonePermission", EmitDefaultValue=true)]
        public PhonePermissionEnum? PhonePermission { get; set; }
        /// <summary>
        /// Defines AgilePermission
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AgilePermissionEnum
        {
            /// <summary>
            /// Enum R for value: r
            /// </summary>
            R = r,

            /// <summary>
            /// Enum Rw for value: rw
            /// </summary>
            Rw = rw,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            Null = null

        }

        /// <summary>
        /// Gets or Sets AgilePermission
        /// </summary>
        [DataMember(Name="agilePermission", EmitDefaultValue=true)]
        public AgilePermissionEnum? AgilePermission { get; set; }
        /// <summary>
        /// Defines JobServerPermission
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JobServerPermissionEnum
        {
            /// <summary>
            /// Enum R for value: r
            /// </summary>
            R = r,

            /// <summary>
            /// Enum Rw for value: rw
            /// </summary>
            Rw = rw,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            Null = null

        }

        /// <summary>
        /// Gets or Sets JobServerPermission
        /// </summary>
        [DataMember(Name="jobServerPermission", EmitDefaultValue=true)]
        public JobServerPermissionEnum? JobServerPermission { get; set; }
        /// <summary>
        /// Defines MediaServerPermission
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaServerPermissionEnum
        {
            /// <summary>
            /// Enum R for value: r
            /// </summary>
            R = r,

            /// <summary>
            /// Enum Rw for value: rw
            /// </summary>
            Rw = rw,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            Null = null

        }

        /// <summary>
        /// Gets or Sets MediaServerPermission
        /// </summary>
        [DataMember(Name="mediaServerPermission", EmitDefaultValue=true)]
        public MediaServerPermissionEnum? MediaServerPermission { get; set; }
        /// <summary>
        /// Defines MailServerPermission
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MailServerPermissionEnum
        {
            /// <summary>
            /// Enum R for value: r
            /// </summary>
            R = r,

            /// <summary>
            /// Enum Rw for value: rw
            /// </summary>
            Rw = rw,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            Null = null

        }

        /// <summary>
        /// Gets or Sets MailServerPermission
        /// </summary>
        [DataMember(Name="mailServerPermission", EmitDefaultValue=true)]
        public MailServerPermissionEnum? MailServerPermission { get; set; }
        /// <summary>
        /// Defines SuperAdminPermission
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SuperAdminPermissionEnum
        {
            /// <summary>
            /// Enum R for value: r
            /// </summary>
            R = r,

            /// <summary>
            /// Enum Rw for value: rw
            /// </summary>
            Rw = rw,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            Null = null

        }

        /// <summary>
        /// Gets or Sets SuperAdminPermission
        /// </summary>
        [DataMember(Name="superAdminPermission", EmitDefaultValue=true)]
        public SuperAdminPermissionEnum? SuperAdminPermission { get; set; }
        /// <summary>
        /// Defines VmTranscription
        /// </summary>
        public enum VmTranscriptionEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 0

        }

        /// <summary>
        /// Gets or Sets VmTranscription
        /// </summary>
        [DataMember(Name="vmTranscription", EmitDefaultValue=true)]
        public VmTranscriptionEnum? VmTranscription { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Users" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Users() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Users" /> class.
        /// </summary>
        /// <param name="email">email (required).</param>
        /// <param name="password">password (required).</param>
        /// <param name="sipPassword">sipPassword (required).</param>
        /// <param name="turnPassword">turnPassword.</param>
        /// <param name="first">first (required).</param>
        /// <param name="last">last (required).</param>
        /// <param name="mobilePhone">mobilePhone.</param>
        /// <param name="businessPhone">businessPhone.</param>
        /// <param name="extension">extension.</param>
        /// <param name="customCallerId">customCallerId.</param>
        /// <param name="jobTitle">jobTitle.</param>
        /// <param name="department">department.</param>
        /// <param name="office">ObjectId (unique 12 bytes ID).</param>
        /// <param name="avatar">avatar.</param>
        /// <param name="language">language.</param>
        /// <param name="isPrimary">isPrimary.</param>
        /// <param name="status">status.</param>
        /// <param name="vmGreetingType">vmGreetingType.</param>
        /// <param name="vmTimeout">vmTimeout.</param>
        /// <param name="vmFile">ObjectId (unique 12 bytes ID).</param>
        /// <param name="vmPlaybackNumber">vmPlaybackNumber.</param>
        /// <param name="pin">pin.</param>
        /// <param name="number">ObjectId (unique 12 bytes ID).</param>
        /// <param name="region">ObjectId (unique 12 bytes ID).</param>
        /// <param name="callerIdNumber">callerIdNumber.</param>
        /// <param name="adminPermission">adminPermission.</param>
        /// <param name="billingPermission">billingPermission.</param>
        /// <param name="phonePermission">phonePermission.</param>
        /// <param name="agilePermission">agilePermission.</param>
        /// <param name="jobServerPermission">jobServerPermission.</param>
        /// <param name="mediaServerPermission">mediaServerPermission.</param>
        /// <param name="mailServerPermission">mailServerPermission.</param>
        /// <param name="superAdminPermission">superAdminPermission.</param>
        /// <param name="timezone">timezone (required).</param>
        /// <param name="vmTranscription">vmTranscription.</param>
        /// <param name="communication">communication.</param>
        public Users(Object email = default(Object), Object password = default(Object), Object sipPassword = default(Object), Object turnPassword = default(Object), Object first = default(Object), Object last = default(Object), Object mobilePhone = default(Object), Object businessPhone = default(Object), Object extension = default(Object), Object customCallerId = default(Object), Object jobTitle = default(Object), Object department = default(Object), Object office = default(Object), Object avatar = default(Object), LanguageEnum? language = default(LanguageEnum?), IsPrimaryEnum? isPrimary = default(IsPrimaryEnum?), StatusEnum? status = default(StatusEnum?), VmGreetingTypeEnum? vmGreetingType = default(VmGreetingTypeEnum?), Object vmTimeout = default(Object), Object vmFile = default(Object), Object vmPlaybackNumber = default(Object), Object pin = default(Object), Object number = default(Object), Object region = default(Object), Object callerIdNumber = default(Object), AdminPermissionEnum? adminPermission = default(AdminPermissionEnum?), BillingPermissionEnum? billingPermission = default(BillingPermissionEnum?), PhonePermissionEnum? phonePermission = default(PhonePermissionEnum?), AgilePermissionEnum? agilePermission = default(AgilePermissionEnum?), JobServerPermissionEnum? jobServerPermission = default(JobServerPermissionEnum?), MediaServerPermissionEnum? mediaServerPermission = default(MediaServerPermissionEnum?), MailServerPermissionEnum? mailServerPermission = default(MailServerPermissionEnum?), SuperAdminPermissionEnum? superAdminPermission = default(SuperAdminPermissionEnum?), Object timezone = default(Object), VmTranscriptionEnum? vmTranscription = default(VmTranscriptionEnum?), Object communication = default(Object))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for Users and cannot be null");
            }
            else
            {
                this.Email = email;
            }

            this.Email = email;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new InvalidDataException("password is a required property for Users and cannot be null");
            }
            else
            {
                this.Password = password;
            }

            this.Password = password;
            // to ensure "sipPassword" is required (not null)
            if (sipPassword == null)
            {
                throw new InvalidDataException("sipPassword is a required property for Users and cannot be null");
            }
            else
            {
                this.SipPassword = sipPassword;
            }

            this.SipPassword = sipPassword;
            this.TurnPassword = turnPassword;
            // to ensure "first" is required (not null)
            if (first == null)
            {
                throw new InvalidDataException("first is a required property for Users and cannot be null");
            }
            else
            {
                this.First = first;
            }

            this.First = first;
            // to ensure "last" is required (not null)
            if (last == null)
            {
                throw new InvalidDataException("last is a required property for Users and cannot be null");
            }
            else
            {
                this.Last = last;
            }

            this.Last = last;
            this.MobilePhone = mobilePhone;
            this.BusinessPhone = businessPhone;
            this.Extension = extension;
            this.CustomCallerId = customCallerId;
            this.JobTitle = jobTitle;
            this.Department = department;
            this.Office = office;
            this.Avatar = avatar;
            this.Language = language;
            this.IsPrimary = isPrimary;
            this.Status = status;
            this.VmGreetingType = vmGreetingType;
            this.VmTimeout = vmTimeout;
            this.VmFile = vmFile;
            this.VmPlaybackNumber = vmPlaybackNumber;
            this.Pin = pin;
            this.Number = number;
            this.Region = region;
            this.CallerIdNumber = callerIdNumber;
            this.AdminPermission = adminPermission;
            this.BillingPermission = billingPermission;
            this.PhonePermission = phonePermission;
            this.AgilePermission = agilePermission;
            this.JobServerPermission = jobServerPermission;
            this.MediaServerPermission = mediaServerPermission;
            this.MailServerPermission = mailServerPermission;
            this.SuperAdminPermission = superAdminPermission;
            // to ensure "timezone" is required (not null)
            if (timezone == null)
            {
                throw new InvalidDataException("timezone is a required property for Users and cannot be null");
            }
            else
            {
                this.Timezone = timezone;
            }

            this.Timezone = timezone;
            this.VmTranscription = vmTranscription;
            this.Communication = communication;
            this.TurnPassword = turnPassword;
            this.MobilePhone = mobilePhone;
            this.BusinessPhone = businessPhone;
            this.Extension = extension;
            this.CustomCallerId = customCallerId;
            this.JobTitle = jobTitle;
            this.Department = department;
            this.Office = office;
            this.Avatar = avatar;
            this.Language = language;
            this.IsPrimary = isPrimary;
            this.Status = status;
            this.VmGreetingType = vmGreetingType;
            this.VmTimeout = vmTimeout;
            this.VmFile = vmFile;
            this.VmPlaybackNumber = vmPlaybackNumber;
            this.Pin = pin;
            this.Number = number;
            this.Region = region;
            this.CallerIdNumber = callerIdNumber;
            this.AdminPermission = adminPermission;
            this.BillingPermission = billingPermission;
            this.PhonePermission = phonePermission;
            this.AgilePermission = agilePermission;
            this.JobServerPermission = jobServerPermission;
            this.MediaServerPermission = mediaServerPermission;
            this.MailServerPermission = mailServerPermission;
            this.SuperAdminPermission = superAdminPermission;
            this.VmTranscription = vmTranscription;
            this.Communication = communication;
        }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=true)]
        public Object Email { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=true)]
        public Object Password { get; set; }

        /// <summary>
        /// Gets or Sets SipPassword
        /// </summary>
        [DataMember(Name="sipPassword", EmitDefaultValue=true)]
        public Object SipPassword { get; set; }

        /// <summary>
        /// Gets or Sets TurnPassword
        /// </summary>
        [DataMember(Name="turnPassword", EmitDefaultValue=true)]
        public Object TurnPassword { get; set; }

        /// <summary>
        /// Gets or Sets First
        /// </summary>
        [DataMember(Name="first", EmitDefaultValue=true)]
        public Object First { get; set; }

        /// <summary>
        /// Gets or Sets Last
        /// </summary>
        [DataMember(Name="last", EmitDefaultValue=true)]
        public Object Last { get; set; }

        /// <summary>
        /// Gets or Sets MobilePhone
        /// </summary>
        [DataMember(Name="mobilePhone", EmitDefaultValue=true)]
        public Object MobilePhone { get; set; }

        /// <summary>
        /// Gets or Sets BusinessPhone
        /// </summary>
        [DataMember(Name="businessPhone", EmitDefaultValue=true)]
        public Object BusinessPhone { get; set; }

        /// <summary>
        /// Gets or Sets Extension
        /// </summary>
        [DataMember(Name="extension", EmitDefaultValue=true)]
        public Object Extension { get; set; }

        /// <summary>
        /// Gets or Sets CustomCallerId
        /// </summary>
        [DataMember(Name="customCallerId", EmitDefaultValue=true)]
        public Object CustomCallerId { get; set; }

        /// <summary>
        /// Gets or Sets JobTitle
        /// </summary>
        [DataMember(Name="jobTitle", EmitDefaultValue=true)]
        public Object JobTitle { get; set; }

        /// <summary>
        /// Gets or Sets Department
        /// </summary>
        [DataMember(Name="department", EmitDefaultValue=true)]
        public Object Department { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="office", EmitDefaultValue=true)]
        public Object Office { get; set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [DataMember(Name="avatar", EmitDefaultValue=true)]
        public Object Avatar { get; set; }





        /// <summary>
        /// Gets or Sets VmTimeout
        /// </summary>
        [DataMember(Name="vmTimeout", EmitDefaultValue=true)]
        public Object VmTimeout { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="vmFile", EmitDefaultValue=true)]
        public Object VmFile { get; set; }

        /// <summary>
        /// Gets or Sets VmPlaybackNumber
        /// </summary>
        [DataMember(Name="vmPlaybackNumber", EmitDefaultValue=true)]
        public Object VmPlaybackNumber { get; set; }

        /// <summary>
        /// Gets or Sets Pin
        /// </summary>
        [DataMember(Name="pin", EmitDefaultValue=true)]
        public Object Pin { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="number", EmitDefaultValue=true)]
        public Object Number { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="region", EmitDefaultValue=true)]
        public Object Region { get; set; }

        /// <summary>
        /// Gets or Sets CallerIdNumber
        /// </summary>
        [DataMember(Name="callerIdNumber", EmitDefaultValue=true)]
        public Object CallerIdNumber { get; set; }









        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name="timezone", EmitDefaultValue=true)]
        public Object Timezone { get; set; }


        /// <summary>
        /// Gets or Sets Communication
        /// </summary>
        [DataMember(Name="communication", EmitDefaultValue=true)]
        public Object Communication { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Users {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  SipPassword: ").Append(SipPassword).Append("\n");
            sb.Append("  TurnPassword: ").Append(TurnPassword).Append("\n");
            sb.Append("  First: ").Append(First).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  BusinessPhone: ").Append(BusinessPhone).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  CustomCallerId: ").Append(CustomCallerId).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Office: ").Append(Office).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  VmGreetingType: ").Append(VmGreetingType).Append("\n");
            sb.Append("  VmTimeout: ").Append(VmTimeout).Append("\n");
            sb.Append("  VmFile: ").Append(VmFile).Append("\n");
            sb.Append("  VmPlaybackNumber: ").Append(VmPlaybackNumber).Append("\n");
            sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  CallerIdNumber: ").Append(CallerIdNumber).Append("\n");
            sb.Append("  AdminPermission: ").Append(AdminPermission).Append("\n");
            sb.Append("  BillingPermission: ").Append(BillingPermission).Append("\n");
            sb.Append("  PhonePermission: ").Append(PhonePermission).Append("\n");
            sb.Append("  AgilePermission: ").Append(AgilePermission).Append("\n");
            sb.Append("  JobServerPermission: ").Append(JobServerPermission).Append("\n");
            sb.Append("  MediaServerPermission: ").Append(MediaServerPermission).Append("\n");
            sb.Append("  MailServerPermission: ").Append(MailServerPermission).Append("\n");
            sb.Append("  SuperAdminPermission: ").Append(SuperAdminPermission).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  VmTranscription: ").Append(VmTranscription).Append("\n");
            sb.Append("  Communication: ").Append(Communication).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Users);
        }

        /// <summary>
        /// Returns true if Users instances are equal
        /// </summary>
        /// <param name="input">Instance of Users to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Users input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.SipPassword == input.SipPassword ||
                    (this.SipPassword != null &&
                    this.SipPassword.Equals(input.SipPassword))
                ) && 
                (
                    this.TurnPassword == input.TurnPassword ||
                    (this.TurnPassword != null &&
                    this.TurnPassword.Equals(input.TurnPassword))
                ) && 
                (
                    this.First == input.First ||
                    (this.First != null &&
                    this.First.Equals(input.First))
                ) && 
                (
                    this.Last == input.Last ||
                    (this.Last != null &&
                    this.Last.Equals(input.Last))
                ) && 
                (
                    this.MobilePhone == input.MobilePhone ||
                    (this.MobilePhone != null &&
                    this.MobilePhone.Equals(input.MobilePhone))
                ) && 
                (
                    this.BusinessPhone == input.BusinessPhone ||
                    (this.BusinessPhone != null &&
                    this.BusinessPhone.Equals(input.BusinessPhone))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.CustomCallerId == input.CustomCallerId ||
                    (this.CustomCallerId != null &&
                    this.CustomCallerId.Equals(input.CustomCallerId))
                ) && 
                (
                    this.JobTitle == input.JobTitle ||
                    (this.JobTitle != null &&
                    this.JobTitle.Equals(input.JobTitle))
                ) && 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) && 
                (
                    this.Office == input.Office ||
                    (this.Office != null &&
                    this.Office.Equals(input.Office))
                ) && 
                (
                    this.Avatar == input.Avatar ||
                    (this.Avatar != null &&
                    this.Avatar.Equals(input.Avatar))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.VmGreetingType == input.VmGreetingType ||
                    (this.VmGreetingType != null &&
                    this.VmGreetingType.Equals(input.VmGreetingType))
                ) && 
                (
                    this.VmTimeout == input.VmTimeout ||
                    (this.VmTimeout != null &&
                    this.VmTimeout.Equals(input.VmTimeout))
                ) && 
                (
                    this.VmFile == input.VmFile ||
                    (this.VmFile != null &&
                    this.VmFile.Equals(input.VmFile))
                ) && 
                (
                    this.VmPlaybackNumber == input.VmPlaybackNumber ||
                    (this.VmPlaybackNumber != null &&
                    this.VmPlaybackNumber.Equals(input.VmPlaybackNumber))
                ) && 
                (
                    this.Pin == input.Pin ||
                    (this.Pin != null &&
                    this.Pin.Equals(input.Pin))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.CallerIdNumber == input.CallerIdNumber ||
                    (this.CallerIdNumber != null &&
                    this.CallerIdNumber.Equals(input.CallerIdNumber))
                ) && 
                (
                    this.AdminPermission == input.AdminPermission ||
                    (this.AdminPermission != null &&
                    this.AdminPermission.Equals(input.AdminPermission))
                ) && 
                (
                    this.BillingPermission == input.BillingPermission ||
                    (this.BillingPermission != null &&
                    this.BillingPermission.Equals(input.BillingPermission))
                ) && 
                (
                    this.PhonePermission == input.PhonePermission ||
                    (this.PhonePermission != null &&
                    this.PhonePermission.Equals(input.PhonePermission))
                ) && 
                (
                    this.AgilePermission == input.AgilePermission ||
                    (this.AgilePermission != null &&
                    this.AgilePermission.Equals(input.AgilePermission))
                ) && 
                (
                    this.JobServerPermission == input.JobServerPermission ||
                    (this.JobServerPermission != null &&
                    this.JobServerPermission.Equals(input.JobServerPermission))
                ) && 
                (
                    this.MediaServerPermission == input.MediaServerPermission ||
                    (this.MediaServerPermission != null &&
                    this.MediaServerPermission.Equals(input.MediaServerPermission))
                ) && 
                (
                    this.MailServerPermission == input.MailServerPermission ||
                    (this.MailServerPermission != null &&
                    this.MailServerPermission.Equals(input.MailServerPermission))
                ) && 
                (
                    this.SuperAdminPermission == input.SuperAdminPermission ||
                    (this.SuperAdminPermission != null &&
                    this.SuperAdminPermission.Equals(input.SuperAdminPermission))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.VmTranscription == input.VmTranscription ||
                    (this.VmTranscription != null &&
                    this.VmTranscription.Equals(input.VmTranscription))
                ) && 
                (
                    this.Communication == input.Communication ||
                    (this.Communication != null &&
                    this.Communication.Equals(input.Communication))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.SipPassword != null)
                    hashCode = hashCode * 59 + this.SipPassword.GetHashCode();
                if (this.TurnPassword != null)
                    hashCode = hashCode * 59 + this.TurnPassword.GetHashCode();
                if (this.First != null)
                    hashCode = hashCode * 59 + this.First.GetHashCode();
                if (this.Last != null)
                    hashCode = hashCode * 59 + this.Last.GetHashCode();
                if (this.MobilePhone != null)
                    hashCode = hashCode * 59 + this.MobilePhone.GetHashCode();
                if (this.BusinessPhone != null)
                    hashCode = hashCode * 59 + this.BusinessPhone.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.CustomCallerId != null)
                    hashCode = hashCode * 59 + this.CustomCallerId.GetHashCode();
                if (this.JobTitle != null)
                    hashCode = hashCode * 59 + this.JobTitle.GetHashCode();
                if (this.Department != null)
                    hashCode = hashCode * 59 + this.Department.GetHashCode();
                if (this.Office != null)
                    hashCode = hashCode * 59 + this.Office.GetHashCode();
                if (this.Avatar != null)
                    hashCode = hashCode * 59 + this.Avatar.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.IsPrimary != null)
                    hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.VmGreetingType != null)
                    hashCode = hashCode * 59 + this.VmGreetingType.GetHashCode();
                if (this.VmTimeout != null)
                    hashCode = hashCode * 59 + this.VmTimeout.GetHashCode();
                if (this.VmFile != null)
                    hashCode = hashCode * 59 + this.VmFile.GetHashCode();
                if (this.VmPlaybackNumber != null)
                    hashCode = hashCode * 59 + this.VmPlaybackNumber.GetHashCode();
                if (this.Pin != null)
                    hashCode = hashCode * 59 + this.Pin.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.CallerIdNumber != null)
                    hashCode = hashCode * 59 + this.CallerIdNumber.GetHashCode();
                if (this.AdminPermission != null)
                    hashCode = hashCode * 59 + this.AdminPermission.GetHashCode();
                if (this.BillingPermission != null)
                    hashCode = hashCode * 59 + this.BillingPermission.GetHashCode();
                if (this.PhonePermission != null)
                    hashCode = hashCode * 59 + this.PhonePermission.GetHashCode();
                if (this.AgilePermission != null)
                    hashCode = hashCode * 59 + this.AgilePermission.GetHashCode();
                if (this.JobServerPermission != null)
                    hashCode = hashCode * 59 + this.JobServerPermission.GetHashCode();
                if (this.MediaServerPermission != null)
                    hashCode = hashCode * 59 + this.MediaServerPermission.GetHashCode();
                if (this.MailServerPermission != null)
                    hashCode = hashCode * 59 + this.MailServerPermission.GetHashCode();
                if (this.SuperAdminPermission != null)
                    hashCode = hashCode * 59 + this.SuperAdminPermission.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.VmTranscription != null)
                    hashCode = hashCode * 59 + this.VmTranscription.GetHashCode();
                if (this.Communication != null)
                    hashCode = hashCode * 59 + this.Communication.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Email (Object) maxLength
            if(this.Email != null && this.Email.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 255.", new [] { "Email" });
            }

            // Email (Object) minLength
            if(this.Email != null && this.Email.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be greater than 5.", new [] { "Email" });
            }

            // Password (Object) maxLength
            if(this.Password != null && this.Password.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be less than 255.", new [] { "Password" });
            }

            // Password (Object) minLength
            if(this.Password != null && this.Password.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be greater than 8.", new [] { "Password" });
            }

            // SipPassword (Object) maxLength
            if(this.SipPassword != null && this.SipPassword.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SipPassword, length must be less than 45.", new [] { "SipPassword" });
            }

            // SipPassword (Object) minLength
            if(this.SipPassword != null && this.SipPassword.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SipPassword, length must be greater than 8.", new [] { "SipPassword" });
            }

            // TurnPassword (Object) maxLength
            if(this.TurnPassword != null && this.TurnPassword.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TurnPassword, length must be less than 45.", new [] { "TurnPassword" });
            }

            // TurnPassword (Object) minLength
            if(this.TurnPassword != null && this.TurnPassword.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TurnPassword, length must be greater than 8.", new [] { "TurnPassword" });
            }

            // First (Object) maxLength
            if(this.First != null && this.First.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for First, length must be less than 45.", new [] { "First" });
            }


            // Last (Object) maxLength
            if(this.Last != null && this.Last.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Last, length must be less than 45.", new [] { "Last" });
            }


            // MobilePhone (Object) maxLength
            if(this.MobilePhone != null && this.MobilePhone.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MobilePhone, length must be less than 20.", new [] { "MobilePhone" });
            }


            // BusinessPhone (Object) maxLength
            if(this.BusinessPhone != null && this.BusinessPhone.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessPhone, length must be less than 20.", new [] { "BusinessPhone" });
            }

            // BusinessPhone (Object) minLength
            if(this.BusinessPhone != null && this.BusinessPhone.Length < 7)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessPhone, length must be greater than 7.", new [] { "BusinessPhone" });
            }

            // JobTitle (Object) maxLength
            if(this.JobTitle != null && this.JobTitle.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobTitle, length must be less than 45.", new [] { "JobTitle" });
            }


            // Department (Object) maxLength
            if(this.Department != null && this.Department.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Department, length must be less than 45.", new [] { "Department" });
            }


            // Avatar (Object) maxLength
            if(this.Avatar != null && this.Avatar.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Avatar, length must be less than 255.", new [] { "Avatar" });
            }


            // Language (Object) maxLength
            if(this.Language != null && this.Language.ToString().Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Language, length must be less than 5.", new [] { "Language" });
            }


            // VmPlaybackNumber (Object) maxLength
            if(this.VmPlaybackNumber != null && this.VmPlaybackNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VmPlaybackNumber, length must be less than 20.", new [] { "VmPlaybackNumber" });
            }


            // CallerIdNumber (Object) maxLength
            if(this.CallerIdNumber != null && this.CallerIdNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallerIdNumber, length must be less than 20.", new [] { "CallerIdNumber" });
            }


            yield break;
        }
    }

}

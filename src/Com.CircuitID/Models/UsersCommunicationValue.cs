/*
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.20
 * Contact: support@circuitid.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.CircuitID.Client.OpenAPIDateConverter;

namespace Com.CircuitID.Models
{
    /// <summary>
    /// UsersCommunicationValue
    /// </summary>
    [DataContract]
    public partial class UsersCommunicationValue :  IEquatable<UsersCommunicationValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersCommunicationValue" /> class.
        /// </summary>
        /// <param name="notifications">notifications.</param>
        /// <param name="missedCalls">missedCalls.</param>
        /// <param name="callRecordings">callRecordings.</param>
        /// <param name="newsletters">newsletters.</param>
        /// <param name="voicemails">voicemails.</param>
        /// <param name="web">web.</param>
        /// <param name="email">email.</param>
        public UsersCommunicationValue(UsersCommunicationValueNotifications notifications = default(UsersCommunicationValueNotifications), UsersCommunicationValueNotifications missedCalls = default(UsersCommunicationValueNotifications), UsersCommunicationValueNotifications callRecordings = default(UsersCommunicationValueNotifications), UsersCommunicationValueNotifications newsletters = default(UsersCommunicationValueNotifications), UsersCommunicationValueNotifications voicemails = default(UsersCommunicationValueNotifications), UsersCommunicationValueNotifications web = default(UsersCommunicationValueNotifications), UsersCommunicationValueNotifications email = default(UsersCommunicationValueNotifications))
        {
            this.Notifications = notifications;
            this.MissedCalls = missedCalls;
            this.CallRecordings = callRecordings;
            this.Newsletters = newsletters;
            this.Voicemails = voicemails;
            this.Web = web;
            this.Email = email;
        }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public UsersCommunicationValueNotifications Notifications { get; set; }

        /// <summary>
        /// Gets or Sets MissedCalls
        /// </summary>
        [DataMember(Name="missedCalls", EmitDefaultValue=false)]
        public UsersCommunicationValueNotifications MissedCalls { get; set; }

        /// <summary>
        /// Gets or Sets CallRecordings
        /// </summary>
        [DataMember(Name="callRecordings", EmitDefaultValue=false)]
        public UsersCommunicationValueNotifications CallRecordings { get; set; }

        /// <summary>
        /// Gets or Sets Newsletters
        /// </summary>
        [DataMember(Name="newsletters", EmitDefaultValue=false)]
        public UsersCommunicationValueNotifications Newsletters { get; set; }

        /// <summary>
        /// Gets or Sets Voicemails
        /// </summary>
        [DataMember(Name="voicemails", EmitDefaultValue=false)]
        public UsersCommunicationValueNotifications Voicemails { get; set; }

        /// <summary>
        /// Gets or Sets Web
        /// </summary>
        [DataMember(Name="web", EmitDefaultValue=false)]
        public UsersCommunicationValueNotifications Web { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public UsersCommunicationValueNotifications Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsersCommunicationValue {\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  MissedCalls: ").Append(MissedCalls).Append("\n");
            sb.Append("  CallRecordings: ").Append(CallRecordings).Append("\n");
            sb.Append("  Newsletters: ").Append(Newsletters).Append("\n");
            sb.Append("  Voicemails: ").Append(Voicemails).Append("\n");
            sb.Append("  Web: ").Append(Web).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsersCommunicationValue);
        }

        /// <summary>
        /// Returns true if UsersCommunicationValue instances are equal
        /// </summary>
        /// <param name="input">Instance of UsersCommunicationValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsersCommunicationValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Notifications == input.Notifications ||
                    (this.Notifications != null &&
                    this.Notifications.Equals(input.Notifications))
                ) && 
                (
                    this.MissedCalls == input.MissedCalls ||
                    (this.MissedCalls != null &&
                    this.MissedCalls.Equals(input.MissedCalls))
                ) && 
                (
                    this.CallRecordings == input.CallRecordings ||
                    (this.CallRecordings != null &&
                    this.CallRecordings.Equals(input.CallRecordings))
                ) && 
                (
                    this.Newsletters == input.Newsletters ||
                    (this.Newsletters != null &&
                    this.Newsletters.Equals(input.Newsletters))
                ) && 
                (
                    this.Voicemails == input.Voicemails ||
                    (this.Voicemails != null &&
                    this.Voicemails.Equals(input.Voicemails))
                ) && 
                (
                    this.Web == input.Web ||
                    (this.Web != null &&
                    this.Web.Equals(input.Web))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.MissedCalls != null)
                    hashCode = hashCode * 59 + this.MissedCalls.GetHashCode();
                if (this.CallRecordings != null)
                    hashCode = hashCode * 59 + this.CallRecordings.GetHashCode();
                if (this.Newsletters != null)
                    hashCode = hashCode * 59 + this.Newsletters.GetHashCode();
                if (this.Voicemails != null)
                    hashCode = hashCode * 59 + this.Voicemails.GetHashCode();
                if (this.Web != null)
                    hashCode = hashCode * 59 + this.Web.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

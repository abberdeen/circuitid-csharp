/*
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.17
 * Contact: support@circuitid.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.CircuitID.Client.OpenAPIDateConverter;

namespace Com.CircuitID.Models
{
    /// <summary>
    /// Timeschedules
    /// </summary>
    [DataContract]
    public partial class Timeschedules :  IEquatable<Timeschedules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Timeschedules" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Timeschedules() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Timeschedules" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="timezone">timezone (required).</param>
        /// <param name="sunday">sunday (required).</param>
        /// <param name="monday">monday (required).</param>
        /// <param name="tuesday">tuesday (required).</param>
        /// <param name="wednesday">wednesday (required).</param>
        /// <param name="thursday">thursday (required).</param>
        /// <param name="friday">friday (required).</param>
        /// <param name="saturday">saturday (required).</param>
        public Timeschedules(Object name = default(Object), Object timezone = default(Object), Object sunday = default(Object), Object monday = default(Object), Object tuesday = default(Object), Object wednesday = default(Object), Object thursday = default(Object), Object friday = default(Object), Object saturday = default(Object))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Timeschedules and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            this.Name = name;
            // to ensure "timezone" is required (not null)
            if (timezone == null)
            {
                throw new InvalidDataException("timezone is a required property for Timeschedules and cannot be null");
            }
            else
            {
                this.Timezone = timezone;
            }

            this.Timezone = timezone;
            // to ensure "sunday" is required (not null)
            if (sunday == null)
            {
                throw new InvalidDataException("sunday is a required property for Timeschedules and cannot be null");
            }
            else
            {
                this.Sunday = sunday;
            }

            this.Sunday = sunday;
            // to ensure "monday" is required (not null)
            if (monday == null)
            {
                throw new InvalidDataException("monday is a required property for Timeschedules and cannot be null");
            }
            else
            {
                this.Monday = monday;
            }

            this.Monday = monday;
            // to ensure "tuesday" is required (not null)
            if (tuesday == null)
            {
                throw new InvalidDataException("tuesday is a required property for Timeschedules and cannot be null");
            }
            else
            {
                this.Tuesday = tuesday;
            }

            this.Tuesday = tuesday;
            // to ensure "wednesday" is required (not null)
            if (wednesday == null)
            {
                throw new InvalidDataException("wednesday is a required property for Timeschedules and cannot be null");
            }
            else
            {
                this.Wednesday = wednesday;
            }

            this.Wednesday = wednesday;
            // to ensure "thursday" is required (not null)
            if (thursday == null)
            {
                throw new InvalidDataException("thursday is a required property for Timeschedules and cannot be null");
            }
            else
            {
                this.Thursday = thursday;
            }

            this.Thursday = thursday;
            // to ensure "friday" is required (not null)
            if (friday == null)
            {
                throw new InvalidDataException("friday is a required property for Timeschedules and cannot be null");
            }
            else
            {
                this.Friday = friday;
            }

            this.Friday = friday;
            // to ensure "saturday" is required (not null)
            if (saturday == null)
            {
                throw new InvalidDataException("saturday is a required property for Timeschedules and cannot be null");
            }
            else
            {
                this.Saturday = saturday;
            }

            this.Saturday = saturday;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public Object Name { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name="timezone", EmitDefaultValue=true)]
        public Object Timezone { get; set; }

        /// <summary>
        /// Gets or Sets Sunday
        /// </summary>
        [DataMember(Name="sunday", EmitDefaultValue=true)]
        public Object Sunday { get; set; }

        /// <summary>
        /// Gets or Sets Monday
        /// </summary>
        [DataMember(Name="monday", EmitDefaultValue=true)]
        public Object Monday { get; set; }

        /// <summary>
        /// Gets or Sets Tuesday
        /// </summary>
        [DataMember(Name="tuesday", EmitDefaultValue=true)]
        public Object Tuesday { get; set; }

        /// <summary>
        /// Gets or Sets Wednesday
        /// </summary>
        [DataMember(Name="wednesday", EmitDefaultValue=true)]
        public Object Wednesday { get; set; }

        /// <summary>
        /// Gets or Sets Thursday
        /// </summary>
        [DataMember(Name="thursday", EmitDefaultValue=true)]
        public Object Thursday { get; set; }

        /// <summary>
        /// Gets or Sets Friday
        /// </summary>
        [DataMember(Name="friday", EmitDefaultValue=true)]
        public Object Friday { get; set; }

        /// <summary>
        /// Gets or Sets Saturday
        /// </summary>
        [DataMember(Name="saturday", EmitDefaultValue=true)]
        public Object Saturday { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Timeschedules {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Sunday: ").Append(Sunday).Append("\n");
            sb.Append("  Monday: ").Append(Monday).Append("\n");
            sb.Append("  Tuesday: ").Append(Tuesday).Append("\n");
            sb.Append("  Wednesday: ").Append(Wednesday).Append("\n");
            sb.Append("  Thursday: ").Append(Thursday).Append("\n");
            sb.Append("  Friday: ").Append(Friday).Append("\n");
            sb.Append("  Saturday: ").Append(Saturday).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Timeschedules);
        }

        /// <summary>
        /// Returns true if Timeschedules instances are equal
        /// </summary>
        /// <param name="input">Instance of Timeschedules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Timeschedules input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.Sunday == input.Sunday ||
                    (this.Sunday != null &&
                    this.Sunday.Equals(input.Sunday))
                ) && 
                (
                    this.Monday == input.Monday ||
                    (this.Monday != null &&
                    this.Monday.Equals(input.Monday))
                ) && 
                (
                    this.Tuesday == input.Tuesday ||
                    (this.Tuesday != null &&
                    this.Tuesday.Equals(input.Tuesday))
                ) && 
                (
                    this.Wednesday == input.Wednesday ||
                    (this.Wednesday != null &&
                    this.Wednesday.Equals(input.Wednesday))
                ) && 
                (
                    this.Thursday == input.Thursday ||
                    (this.Thursday != null &&
                    this.Thursday.Equals(input.Thursday))
                ) && 
                (
                    this.Friday == input.Friday ||
                    (this.Friday != null &&
                    this.Friday.Equals(input.Friday))
                ) && 
                (
                    this.Saturday == input.Saturday ||
                    (this.Saturday != null &&
                    this.Saturday.Equals(input.Saturday))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.Sunday != null)
                    hashCode = hashCode * 59 + this.Sunday.GetHashCode();
                if (this.Monday != null)
                    hashCode = hashCode * 59 + this.Monday.GetHashCode();
                if (this.Tuesday != null)
                    hashCode = hashCode * 59 + this.Tuesday.GetHashCode();
                if (this.Wednesday != null)
                    hashCode = hashCode * 59 + this.Wednesday.GetHashCode();
                if (this.Thursday != null)
                    hashCode = hashCode * 59 + this.Thursday.GetHashCode();
                if (this.Friday != null)
                    hashCode = hashCode * 59 + this.Friday.GetHashCode();
                if (this.Saturday != null)
                    hashCode = hashCode * 59 + this.Saturday.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (Object) maxLength
            if(this.Name != null && this.Name.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 45.", new [] { "Name" });
            }


            // Timezone (Object) maxLength
            if(this.Timezone != null && this.Timezone.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timezone, length must be less than 45.", new [] { "Timezone" });
            }


            yield break;
        }
    }

}

/*
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.20
 * Contact: support@circuitid.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.CircuitID.Client.OpenAPIDateConverter;

namespace Com.CircuitID.Models
{
    /// <summary>
    /// GetNumber200Response
    /// </summary>
    [DataContract]
    public partial class GetNumber200Response :  IEquatable<GetNumber200Response>, IValidatableObject
    {
        /// <summary>
        /// Defines InUse
        /// </summary>
        public enum InUseEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0

        }

        /// <summary>
        /// Gets or Sets InUse
        /// </summary>
        [DataMember(Name="inUse", EmitDefaultValue=false)]
        public InUseEnum? InUse { get; set; }
        /// <summary>
        /// Defines Fax
        /// </summary>
        public enum FaxEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0

        }

        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public FaxEnum? Fax { get; set; }
        /// <summary>
        /// Defines Voice
        /// </summary>
        public enum VoiceEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0

        }

        /// <summary>
        /// Gets or Sets Voice
        /// </summary>
        [DataMember(Name="voice", EmitDefaultValue=false)]
        public VoiceEnum? Voice { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0

        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines Sms
        /// </summary>
        public enum SmsEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0

        }

        /// <summary>
        /// Gets or Sets Sms
        /// </summary>
        [DataMember(Name="sms", EmitDefaultValue=false)]
        public SmsEnum? Sms { get; set; }
        /// <summary>
        /// Defines Mms
        /// </summary>
        public enum MmsEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0

        }

        /// <summary>
        /// Gets or Sets Mms
        /// </summary>
        [DataMember(Name="mms", EmitDefaultValue=false)]
        public MmsEnum? Mms { get; set; }
        /// <summary>
        /// Defines MessageClass
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageClassEnum
        {
            /// <summary>
            /// Enum P2P for value: P2P
            /// </summary>
            [EnumMember(Value = "P2P")]
            P2P = 1,

            /// <summary>
            /// Enum A2PLC for value: A2PLC
            /// </summary>
            [EnumMember(Value = "A2PLC")]
            A2PLC = 2,

            /// <summary>
            /// Enum A2P8XX for value: A2P8XX
            /// </summary>
            [EnumMember(Value = "A2P8XX")]
            A2P8XX = 3

        }

        /// <summary>
        /// Gets or Sets MessageClass
        /// </summary>
        [DataMember(Name="messageClass", EmitDefaultValue=false)]
        public MessageClassEnum? MessageClass { get; set; }
        /// <summary>
        /// Defines MessageType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageTypeEnum
        {
            /// <summary>
            /// Enum SMS for value: SMS
            /// </summary>
            [EnumMember(Value = "SMS")]
            SMS = 1,

            /// <summary>
            /// Enum MMS for value: MMS
            /// </summary>
            [EnumMember(Value = "MMS")]
            MMS = 2,

            /// <summary>
            /// Enum SMSMMS for value: SMSMMS
            /// </summary>
            [EnumMember(Value = "SMSMMS")]
            SMSMMS = 3,

            /// <summary>
            /// Enum SMSALT for value: SMS_ALT
            /// </summary>
            [EnumMember(Value = "SMS_ALT")]
            SMSALT = 4,

            /// <summary>
            /// Enum MMSALT for value: MMS_ALT
            /// </summary>
            [EnumMember(Value = "MMS_ALT")]
            MMSALT = 5,

            /// <summary>
            /// Enum SMSMMSALT for value: SMSMMS_ALT
            /// </summary>
            [EnumMember(Value = "SMSMMS_ALT")]
            SMSMMSALT = 6

        }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name="messageType", EmitDefaultValue=false)]
        public MessageTypeEnum? MessageType { get; set; }
        /// <summary>
        /// Defines E911Supported
        /// </summary>
        public enum E911SupportedEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0

        }

        /// <summary>
        /// Gets or Sets E911Supported
        /// </summary>
        [DataMember(Name="e911Supported", EmitDefaultValue=false)]
        public E911SupportedEnum? E911Supported { get; set; }
        /// <summary>
        /// Defines CallerNameSupported
        /// </summary>
        public enum CallerNameSupportedEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0

        }

        /// <summary>
        /// Gets or Sets CallerNameSupported
        /// </summary>
        [DataMember(Name="callerNameSupported", EmitDefaultValue=false)]
        public CallerNameSupportedEnum? CallerNameSupported { get; set; }
        /// <summary>
        /// Defines DirectoryListingSupported
        /// </summary>
        public enum DirectoryListingSupportedEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0

        }

        /// <summary>
        /// Gets or Sets DirectoryListingSupported
        /// </summary>
        [DataMember(Name="directoryListingSupported", EmitDefaultValue=false)]
        public DirectoryListingSupportedEnum? DirectoryListingSupported { get; set; }
        /// <summary>
        /// Defines MessagingSupported
        /// </summary>
        public enum MessagingSupportedEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0

        }

        /// <summary>
        /// Gets or Sets MessagingSupported
        /// </summary>
        [DataMember(Name="messagingSupported", EmitDefaultValue=false)]
        public MessagingSupportedEnum? MessagingSupported { get; set; }
        /// <summary>
        /// Defines DestinationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DestinationTypeEnum
        {
            /// <summary>
            /// Enum Announcements for value: announcements
            /// </summary>
            [EnumMember(Value = "announcements")]
            Announcements = 1,

            /// <summary>
            /// Enum Directories for value: directories
            /// </summary>
            [EnumMember(Value = "directories")]
            Directories = 2,

            /// <summary>
            /// Enum Park for value: park
            /// </summary>
            [EnumMember(Value = "park")]
            Park = 3,

            /// <summary>
            /// Enum Numbers for value: numbers
            /// </summary>
            [EnumMember(Value = "numbers")]
            Numbers = 4,

            /// <summary>
            /// Enum Menus for value: menus
            /// </summary>
            [EnumMember(Value = "menus")]
            Menus = 5,

            /// <summary>
            /// Enum Users for value: users
            /// </summary>
            [EnumMember(Value = "users")]
            Users = 6,

            /// <summary>
            /// Enum Servers for value: servers
            /// </summary>
            [EnumMember(Value = "servers")]
            Servers = 7,

            /// <summary>
            /// Enum Inboundrules for value: inboundrules
            /// </summary>
            [EnumMember(Value = "inboundrules")]
            Inboundrules = 8,

            /// <summary>
            /// Enum Callqueues for value: callqueues
            /// </summary>
            [EnumMember(Value = "callqueues")]
            Callqueues = 9,

            /// <summary>
            /// Enum Faxaccounts for value: faxaccounts
            /// </summary>
            [EnumMember(Value = "faxaccounts")]
            Faxaccounts = 10,

            /// <summary>
            /// Enum Callforwarding for value: callforwarding
            /// </summary>
            [EnumMember(Value = "callforwarding")]
            Callforwarding = 11,

            /// <summary>
            /// Enum Hangup for value: hangup
            /// </summary>
            [EnumMember(Value = "hangup")]
            Hangup = 12,

            /// <summary>
            /// Enum Phoneinboundrules for value: phoneinboundrules
            /// </summary>
            [EnumMember(Value = "phoneinboundrules")]
            Phoneinboundrules = 13,

            /// <summary>
            /// Enum Voicemailaccounts for value: voicemailaccounts
            /// </summary>
            [EnumMember(Value = "voicemailaccounts")]
            Voicemailaccounts = 14

        }

        /// <summary>
        /// Gets or Sets DestinationType
        /// </summary>
        [DataMember(Name="destinationType", EmitDefaultValue=true)]
        public DestinationTypeEnum DestinationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetNumber200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetNumber200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetNumber200Response" /> class.
        /// </summary>
        /// <param name="inUse">inUse (default to InUseEnum.NUMBER_1).</param>
        /// <param name="name">name (required).</param>
        /// <param name="countryCode">countryCode (required).</param>
        /// <param name="amount">amount.</param>
        /// <param name="perMinuteRate">perMinuteRate.</param>
        /// <param name="fax">fax (default to FaxEnum.NUMBER_0).</param>
        /// <param name="voice">voice (default to VoiceEnum.NUMBER_0).</param>
        /// <param name="status">status (default to StatusEnum.NUMBER_1).</param>
        /// <param name="sms">sms (default to SmsEnum.NUMBER_0).</param>
        /// <param name="mms">mms (default to MmsEnum.NUMBER_0).</param>
        /// <param name="directoryListing">ObjectId (unique 12 bytes ID).</param>
        /// <param name="callerName">callerName.</param>
        /// <param name="e911">ObjectId (unique 12 bytes ID).</param>
        /// <param name="messageCampaign">ObjectId (unique 12 bytes ID).</param>
        /// <param name="messageClass">messageClass.</param>
        /// <param name="messageType">messageType.</param>
        /// <param name="e911Supported">e911Supported (default to E911SupportedEnum.NUMBER_0).</param>
        /// <param name="callerNameSupported">callerNameSupported (default to CallerNameSupportedEnum.NUMBER_0).</param>
        /// <param name="directoryListingSupported">directoryListingSupported (default to DirectoryListingSupportedEnum.NUMBER_0).</param>
        /// <param name="messagingSupported">messagingSupported (default to MessagingSupportedEnum.NUMBER_0).</param>
        /// <param name="destinationType">destinationType (required) (default to DestinationTypeEnum.Park).</param>
        /// <param name="destination">ObjectId (unique 12 bytes ID).</param>
        /// <param name="_ref">_ref.</param>
        /// <param name="callForwardingDestination">callForwardingDestination.</param>
        /// <param name="id">ObjectId (unique 12 bytes ID).</param>
        /// <param name="createdByUserId">ObjectId (unique 12 bytes ID).</param>
        /// <param name="updatedByUserId">ObjectId (unique 12 bytes ID).</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public GetNumber200Response(InUseEnum? inUse = InUseEnum.NUMBER_1, string name = default(string), string countryCode = default(string), int amount = default(int), int perMinuteRate = default(int), FaxEnum? fax = FaxEnum.NUMBER_0, VoiceEnum? voice = VoiceEnum.NUMBER_0, StatusEnum? status = StatusEnum.NUMBER_1, SmsEnum? sms = SmsEnum.NUMBER_0, MmsEnum? mms = MmsEnum.NUMBER_0, string directoryListing = default(string), string callerName = default(string), string e911 = default(string), string messageCampaign = default(string), MessageClassEnum? messageClass = default(MessageClassEnum?), MessageTypeEnum? messageType = default(MessageTypeEnum?), E911SupportedEnum? e911Supported = E911SupportedEnum.NUMBER_0, CallerNameSupportedEnum? callerNameSupported = CallerNameSupportedEnum.NUMBER_0, DirectoryListingSupportedEnum? directoryListingSupported = DirectoryListingSupportedEnum.NUMBER_0, MessagingSupportedEnum? messagingSupported = MessagingSupportedEnum.NUMBER_0, DestinationTypeEnum destinationType = DestinationTypeEnum.Park, string destination = default(string), string _ref = default(string), string callForwardingDestination = default(string), string id = default(string), string createdByUserId = default(string), string updatedByUserId = default(string), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for GetNumber200Response and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new InvalidDataException("countryCode is a required property for GetNumber200Response and cannot be null");
            }
            else
            {
                this.CountryCode = countryCode;
            }

            // to ensure "destinationType" is required (not null)
            if (destinationType == null)
            {
                throw new InvalidDataException("destinationType is a required property for GetNumber200Response and cannot be null");
            }
            else
            {
                this.DestinationType = destinationType;
            }

            // use default value if no "inUse" provided
            if (inUse == null)
            {
                this.InUse = InUseEnum.NUMBER_1;
            }
            else
            {
                this.InUse = inUse;
            }
            this.Amount = amount;
            this.PerMinuteRate = perMinuteRate;
            // use default value if no "fax" provided
            if (fax == null)
            {
                this.Fax = FaxEnum.NUMBER_0;
            }
            else
            {
                this.Fax = fax;
            }
            // use default value if no "voice" provided
            if (voice == null)
            {
                this.Voice = VoiceEnum.NUMBER_0;
            }
            else
            {
                this.Voice = voice;
            }
            // use default value if no "status" provided
            if (status == null)
            {
                this.Status = StatusEnum.NUMBER_1;
            }
            else
            {
                this.Status = status;
            }
            // use default value if no "sms" provided
            if (sms == null)
            {
                this.Sms = SmsEnum.NUMBER_0;
            }
            else
            {
                this.Sms = sms;
            }
            // use default value if no "mms" provided
            if (mms == null)
            {
                this.Mms = MmsEnum.NUMBER_0;
            }
            else
            {
                this.Mms = mms;
            }
            this.DirectoryListing = directoryListing;
            this.CallerName = callerName;
            this.E911 = e911;
            this.MessageCampaign = messageCampaign;
            this.MessageClass = messageClass;
            this.MessageType = messageType;
            // use default value if no "e911Supported" provided
            if (e911Supported == null)
            {
                this.E911Supported = E911SupportedEnum.NUMBER_0;
            }
            else
            {
                this.E911Supported = e911Supported;
            }
            // use default value if no "callerNameSupported" provided
            if (callerNameSupported == null)
            {
                this.CallerNameSupported = CallerNameSupportedEnum.NUMBER_0;
            }
            else
            {
                this.CallerNameSupported = callerNameSupported;
            }
            // use default value if no "directoryListingSupported" provided
            if (directoryListingSupported == null)
            {
                this.DirectoryListingSupported = DirectoryListingSupportedEnum.NUMBER_0;
            }
            else
            {
                this.DirectoryListingSupported = directoryListingSupported;
            }
            // use default value if no "messagingSupported" provided
            if (messagingSupported == null)
            {
                this.MessagingSupported = MessagingSupportedEnum.NUMBER_0;
            }
            else
            {
                this.MessagingSupported = messagingSupported;
            }
            this.Destination = destination;
            this.Ref = _ref;
            this.CallForwardingDestination = callForwardingDestination;
            this.Id = id;
            this.CreatedByUserId = createdByUserId;
            this.UpdatedByUserId = updatedByUserId;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }


        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="countryCode", EmitDefaultValue=true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public int Amount { get; set; }

        /// <summary>
        /// Gets or Sets PerMinuteRate
        /// </summary>
        [DataMember(Name="perMinuteRate", EmitDefaultValue=false)]
        public int PerMinuteRate { get; set; }






        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="directoryListing", EmitDefaultValue=false)]
        public string DirectoryListing { get; set; }

        /// <summary>
        /// Gets or Sets CallerName
        /// </summary>
        [DataMember(Name="callerName", EmitDefaultValue=false)]
        public string CallerName { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="e911", EmitDefaultValue=false)]
        public string E911 { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="messageCampaign", EmitDefaultValue=false)]
        public string MessageCampaign { get; set; }








        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets Ref
        /// </summary>
        [DataMember(Name="ref", EmitDefaultValue=false)]
        public string Ref { get; set; }

        /// <summary>
        /// Gets or Sets CallForwardingDestination
        /// </summary>
        [DataMember(Name="callForwardingDestination", EmitDefaultValue=false)]
        public string CallForwardingDestination { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="createdByUserId", EmitDefaultValue=false)]
        public string CreatedByUserId { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="updatedByUserId", EmitDefaultValue=false)]
        public string UpdatedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetNumber200Response {\n");
            sb.Append("  InUse: ").Append(InUse).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PerMinuteRate: ").Append(PerMinuteRate).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Sms: ").Append(Sms).Append("\n");
            sb.Append("  Mms: ").Append(Mms).Append("\n");
            sb.Append("  DirectoryListing: ").Append(DirectoryListing).Append("\n");
            sb.Append("  CallerName: ").Append(CallerName).Append("\n");
            sb.Append("  E911: ").Append(E911).Append("\n");
            sb.Append("  MessageCampaign: ").Append(MessageCampaign).Append("\n");
            sb.Append("  MessageClass: ").Append(MessageClass).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  E911Supported: ").Append(E911Supported).Append("\n");
            sb.Append("  CallerNameSupported: ").Append(CallerNameSupported).Append("\n");
            sb.Append("  DirectoryListingSupported: ").Append(DirectoryListingSupported).Append("\n");
            sb.Append("  MessagingSupported: ").Append(MessagingSupported).Append("\n");
            sb.Append("  DestinationType: ").Append(DestinationType).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("  CallForwardingDestination: ").Append(CallForwardingDestination).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  UpdatedByUserId: ").Append(UpdatedByUserId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetNumber200Response);
        }

        /// <summary>
        /// Returns true if GetNumber200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of GetNumber200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetNumber200Response input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InUse == input.InUse ||
                    (this.InUse != null &&
                    this.InUse.Equals(input.InUse))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.PerMinuteRate == input.PerMinuteRate ||
                    (this.PerMinuteRate != null &&
                    this.PerMinuteRate.Equals(input.PerMinuteRate))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.Voice == input.Voice ||
                    (this.Voice != null &&
                    this.Voice.Equals(input.Voice))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Sms == input.Sms ||
                    (this.Sms != null &&
                    this.Sms.Equals(input.Sms))
                ) && 
                (
                    this.Mms == input.Mms ||
                    (this.Mms != null &&
                    this.Mms.Equals(input.Mms))
                ) && 
                (
                    this.DirectoryListing == input.DirectoryListing ||
                    (this.DirectoryListing != null &&
                    this.DirectoryListing.Equals(input.DirectoryListing))
                ) && 
                (
                    this.CallerName == input.CallerName ||
                    (this.CallerName != null &&
                    this.CallerName.Equals(input.CallerName))
                ) && 
                (
                    this.E911 == input.E911 ||
                    (this.E911 != null &&
                    this.E911.Equals(input.E911))
                ) && 
                (
                    this.MessageCampaign == input.MessageCampaign ||
                    (this.MessageCampaign != null &&
                    this.MessageCampaign.Equals(input.MessageCampaign))
                ) && 
                (
                    this.MessageClass == input.MessageClass ||
                    (this.MessageClass != null &&
                    this.MessageClass.Equals(input.MessageClass))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.E911Supported == input.E911Supported ||
                    (this.E911Supported != null &&
                    this.E911Supported.Equals(input.E911Supported))
                ) && 
                (
                    this.CallerNameSupported == input.CallerNameSupported ||
                    (this.CallerNameSupported != null &&
                    this.CallerNameSupported.Equals(input.CallerNameSupported))
                ) && 
                (
                    this.DirectoryListingSupported == input.DirectoryListingSupported ||
                    (this.DirectoryListingSupported != null &&
                    this.DirectoryListingSupported.Equals(input.DirectoryListingSupported))
                ) && 
                (
                    this.MessagingSupported == input.MessagingSupported ||
                    (this.MessagingSupported != null &&
                    this.MessagingSupported.Equals(input.MessagingSupported))
                ) && 
                (
                    this.DestinationType == input.DestinationType ||
                    (this.DestinationType != null &&
                    this.DestinationType.Equals(input.DestinationType))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.Ref == input.Ref ||
                    (this.Ref != null &&
                    this.Ref.Equals(input.Ref))
                ) && 
                (
                    this.CallForwardingDestination == input.CallForwardingDestination ||
                    (this.CallForwardingDestination != null &&
                    this.CallForwardingDestination.Equals(input.CallForwardingDestination))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedByUserId == input.CreatedByUserId ||
                    (this.CreatedByUserId != null &&
                    this.CreatedByUserId.Equals(input.CreatedByUserId))
                ) && 
                (
                    this.UpdatedByUserId == input.UpdatedByUserId ||
                    (this.UpdatedByUserId != null &&
                    this.UpdatedByUserId.Equals(input.UpdatedByUserId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InUse != null)
                    hashCode = hashCode * 59 + this.InUse.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.PerMinuteRate != null)
                    hashCode = hashCode * 59 + this.PerMinuteRate.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.Voice != null)
                    hashCode = hashCode * 59 + this.Voice.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Sms != null)
                    hashCode = hashCode * 59 + this.Sms.GetHashCode();
                if (this.Mms != null)
                    hashCode = hashCode * 59 + this.Mms.GetHashCode();
                if (this.DirectoryListing != null)
                    hashCode = hashCode * 59 + this.DirectoryListing.GetHashCode();
                if (this.CallerName != null)
                    hashCode = hashCode * 59 + this.CallerName.GetHashCode();
                if (this.E911 != null)
                    hashCode = hashCode * 59 + this.E911.GetHashCode();
                if (this.MessageCampaign != null)
                    hashCode = hashCode * 59 + this.MessageCampaign.GetHashCode();
                if (this.MessageClass != null)
                    hashCode = hashCode * 59 + this.MessageClass.GetHashCode();
                if (this.MessageType != null)
                    hashCode = hashCode * 59 + this.MessageType.GetHashCode();
                if (this.E911Supported != null)
                    hashCode = hashCode * 59 + this.E911Supported.GetHashCode();
                if (this.CallerNameSupported != null)
                    hashCode = hashCode * 59 + this.CallerNameSupported.GetHashCode();
                if (this.DirectoryListingSupported != null)
                    hashCode = hashCode * 59 + this.DirectoryListingSupported.GetHashCode();
                if (this.MessagingSupported != null)
                    hashCode = hashCode * 59 + this.MessagingSupported.GetHashCode();
                if (this.DestinationType != null)
                    hashCode = hashCode * 59 + this.DestinationType.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.Ref != null)
                    hashCode = hashCode * 59 + this.Ref.GetHashCode();
                if (this.CallForwardingDestination != null)
                    hashCode = hashCode * 59 + this.CallForwardingDestination.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreatedByUserId != null)
                    hashCode = hashCode * 59 + this.CreatedByUserId.GetHashCode();
                if (this.UpdatedByUserId != null)
                    hashCode = hashCode * 59 + this.UpdatedByUserId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 20.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 10.", new [] { "Name" });
            }

            // CountryCode (string) maxLength
            if(this.CountryCode != null && this.CountryCode.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, length must be less than 4.", new [] { "CountryCode" });
            }

            // CountryCode (string) minLength
            if(this.CountryCode != null && this.CountryCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, length must be greater than 1.", new [] { "CountryCode" });
            }

            // CallerName (string) maxLength
            if(this.CallerName != null && this.CallerName.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallerName, length must be less than 45.", new [] { "CallerName" });
            }


            // MessageCampaign (string) maxLength
            if(this.MessageCampaign != null && this.MessageCampaign.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MessageCampaign, length must be less than 45.", new [] { "MessageCampaign" });
            }


            // Ref (string) maxLength
            if(this.Ref != null && this.Ref.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ref, length must be less than 100.", new [] { "Ref" });
            }

            // Ref (string) minLength
            if(this.Ref != null && this.Ref.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ref, length must be greater than 5.", new [] { "Ref" });
            }

            // CallForwardingDestination (string) maxLength
            if(this.CallForwardingDestination != null && this.CallForwardingDestination.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallForwardingDestination, length must be less than 45.", new [] { "CallForwardingDestination" });
            }

            // CallForwardingDestination (string) minLength
            if(this.CallForwardingDestination != null && this.CallForwardingDestination.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallForwardingDestination, length must be greater than 10.", new [] { "CallForwardingDestination" });
            }

            yield break;
        }
    }

}

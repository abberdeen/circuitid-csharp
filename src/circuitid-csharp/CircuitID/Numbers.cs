/*
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.15
 * Contact: support@circuitid.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = circuitid-csharp.Client.OpenAPIDateConverter;

namespace circuitid-csharp.CircuitID
{
    /// <summary>
    /// Numbers
    /// </summary>
    [DataContract]
    public partial class Numbers :  IEquatable<Numbers>, IValidatableObject
    {
        /// <summary>
        /// Defines InUse
        /// </summary>
        public enum InUseEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 0

        }

        /// <summary>
        /// Gets or Sets InUse
        /// </summary>
        [DataMember(Name="inUse", EmitDefaultValue=true)]
        public InUseEnum? InUse { get; set; }
        /// <summary>
        /// Defines Fax
        /// </summary>
        public enum FaxEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 0

        }

        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name="fax", EmitDefaultValue=true)]
        public FaxEnum? Fax { get; set; }
        /// <summary>
        /// Defines Voice
        /// </summary>
        public enum VoiceEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 0

        }

        /// <summary>
        /// Gets or Sets Voice
        /// </summary>
        [DataMember(Name="voice", EmitDefaultValue=true)]
        public VoiceEnum? Voice { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 0

        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines Sms
        /// </summary>
        public enum SmsEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 0

        }

        /// <summary>
        /// Gets or Sets Sms
        /// </summary>
        [DataMember(Name="sms", EmitDefaultValue=true)]
        public SmsEnum? Sms { get; set; }
        /// <summary>
        /// Defines Mms
        /// </summary>
        public enum MmsEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 0

        }

        /// <summary>
        /// Gets or Sets Mms
        /// </summary>
        [DataMember(Name="mms", EmitDefaultValue=true)]
        public MmsEnum? Mms { get; set; }
        /// <summary>
        /// Defines MessageClass
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageClassEnum
        {
            /// <summary>
            /// Enum P2P for value: P2P
            /// </summary>
            P2P = P2P,

            /// <summary>
            /// Enum A2PLC for value: A2PLC
            /// </summary>
            A2PLC = A2PLC,

            /// <summary>
            /// Enum A2P8XX for value: A2P8XX
            /// </summary>
            A2P8XX = A2P8XX

        }

        /// <summary>
        /// Gets or Sets MessageClass
        /// </summary>
        [DataMember(Name="messageClass", EmitDefaultValue=true)]
        public MessageClassEnum? MessageClass { get; set; }
        /// <summary>
        /// Defines MessageType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageTypeEnum
        {
            /// <summary>
            /// Enum SMS for value: SMS
            /// </summary>
            SMS = SMS,

            /// <summary>
            /// Enum MMS for value: MMS
            /// </summary>
            MMS = MMS,

            /// <summary>
            /// Enum SMSMMS for value: SMSMMS
            /// </summary>
            SMSMMS = SMSMMS,

            /// <summary>
            /// Enum SMSALT for value: SMS_ALT
            /// </summary>
            SMSALT = SMS_ALT,

            /// <summary>
            /// Enum MMSALT for value: MMS_ALT
            /// </summary>
            MMSALT = MMS_ALT,

            /// <summary>
            /// Enum SMSMMSALT for value: SMSMMS_ALT
            /// </summary>
            SMSMMSALT = SMSMMS_ALT

        }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name="messageType", EmitDefaultValue=true)]
        public MessageTypeEnum? MessageType { get; set; }
        /// <summary>
        /// Defines E911Supported
        /// </summary>
        public enum E911SupportedEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 0

        }

        /// <summary>
        /// Gets or Sets E911Supported
        /// </summary>
        [DataMember(Name="e911Supported", EmitDefaultValue=true)]
        public E911SupportedEnum? E911Supported { get; set; }
        /// <summary>
        /// Defines CallerNameSupported
        /// </summary>
        public enum CallerNameSupportedEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 0

        }

        /// <summary>
        /// Gets or Sets CallerNameSupported
        /// </summary>
        [DataMember(Name="callerNameSupported", EmitDefaultValue=true)]
        public CallerNameSupportedEnum? CallerNameSupported { get; set; }
        /// <summary>
        /// Defines DirectoryListingSupported
        /// </summary>
        public enum DirectoryListingSupportedEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 0

        }

        /// <summary>
        /// Gets or Sets DirectoryListingSupported
        /// </summary>
        [DataMember(Name="directoryListingSupported", EmitDefaultValue=true)]
        public DirectoryListingSupportedEnum? DirectoryListingSupported { get; set; }
        /// <summary>
        /// Defines MessagingSupported
        /// </summary>
        public enum MessagingSupportedEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 0

        }

        /// <summary>
        /// Gets or Sets MessagingSupported
        /// </summary>
        [DataMember(Name="messagingSupported", EmitDefaultValue=true)]
        public MessagingSupportedEnum? MessagingSupported { get; set; }
        /// <summary>
        /// Defines DestinationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DestinationTypeEnum
        {
            /// <summary>
            /// Enum Announcements for value: announcements
            /// </summary>
            Announcements = announcements,

            /// <summary>
            /// Enum Directories for value: directories
            /// </summary>
            Directories = directories,

            /// <summary>
            /// Enum Park for value: park
            /// </summary>
            Park = park,

            /// <summary>
            /// Enum Numbers for value: numbers
            /// </summary>
            Numbers = numbers,

            /// <summary>
            /// Enum Menus for value: menus
            /// </summary>
            Menus = menus,

            /// <summary>
            /// Enum Users for value: users
            /// </summary>
            Users = users,

            /// <summary>
            /// Enum Servers for value: servers
            /// </summary>
            Servers = servers,

            /// <summary>
            /// Enum Inboundrules for value: inboundrules
            /// </summary>
            Inboundrules = inboundrules,

            /// <summary>
            /// Enum Callqueues for value: callqueues
            /// </summary>
            Callqueues = callqueues,

            /// <summary>
            /// Enum Faxaccounts for value: faxaccounts
            /// </summary>
            Faxaccounts = faxaccounts,

            /// <summary>
            /// Enum Callforwarding for value: callforwarding
            /// </summary>
            Callforwarding = callforwarding,

            /// <summary>
            /// Enum Hangup for value: hangup
            /// </summary>
            Hangup = hangup,

            /// <summary>
            /// Enum Phoneinboundrules for value: phoneinboundrules
            /// </summary>
            Phoneinboundrules = phoneinboundrules,

            /// <summary>
            /// Enum Voicemailaccounts for value: voicemailaccounts
            /// </summary>
            Voicemailaccounts = voicemailaccounts

        }

        /// <summary>
        /// Gets or Sets DestinationType
        /// </summary>
        [DataMember(Name="destinationType", EmitDefaultValue=true)]
        public DestinationTypeEnum DestinationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Numbers" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Numbers() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Numbers" /> class.
        /// </summary>
        /// <param name="inUse">inUse.</param>
        /// <param name="name">name (required).</param>
        /// <param name="countryCode">countryCode (required).</param>
        /// <param name="amount">amount.</param>
        /// <param name="perMinuteRate">perMinuteRate.</param>
        /// <param name="provider">ObjectId (unique 12 bytes ID) (required).</param>
        /// <param name="originalProvider">ObjectId (unique 12 bytes ID).</param>
        /// <param name="providerOrderId">providerOrderId.</param>
        /// <param name="fax">fax.</param>
        /// <param name="voice">voice.</param>
        /// <param name="status">status.</param>
        /// <param name="sms">sms.</param>
        /// <param name="mms">mms.</param>
        /// <param name="changeRegionOrderId">changeRegionOrderId.</param>
        /// <param name="changeRegionOrderDate">changeRegionOrderDate.</param>
        /// <param name="directoryListing">ObjectId (unique 12 bytes ID).</param>
        /// <param name="directoryListingOrderId">directoryListingOrderId.</param>
        /// <param name="directoryListingOrderDate">directoryListingOrderDate.</param>
        /// <param name="callerName">callerName.</param>
        /// <param name="callerNameOrderId">callerNameOrderId.</param>
        /// <param name="callerNameOrderDate">callerNameOrderDate.</param>
        /// <param name="e911">ObjectId (unique 12 bytes ID).</param>
        /// <param name="e911OrderId">e911OrderId.</param>
        /// <param name="e911OrderDate">e911OrderDate.</param>
        /// <param name="messageCampaign">ObjectId (unique 12 bytes ID).</param>
        /// <param name="messageClass">messageClass.</param>
        /// <param name="messageType">messageType.</param>
        /// <param name="messageCampaignOrderId">messageCampaignOrderId.</param>
        /// <param name="messageCampaignOrderDate">messageCampaignOrderDate.</param>
        /// <param name="e911Supported">e911Supported.</param>
        /// <param name="callerNameSupported">callerNameSupported.</param>
        /// <param name="directoryListingSupported">directoryListingSupported.</param>
        /// <param name="messagingSupported">messagingSupported.</param>
        /// <param name="destinationType">destinationType (required).</param>
        /// <param name="destination">ObjectId (unique 12 bytes ID).</param>
        /// <param name="_ref">_ref.</param>
        /// <param name="callForwardingDestination">callForwardingDestination.</param>
        public Numbers(InUseEnum? inUse = default(InUseEnum?), Object name = default(Object), Object countryCode = default(Object), Object amount = default(Object), Object perMinuteRate = default(Object), Object provider = default(Object), Object originalProvider = default(Object), Object providerOrderId = default(Object), FaxEnum? fax = default(FaxEnum?), VoiceEnum? voice = default(VoiceEnum?), StatusEnum? status = default(StatusEnum?), SmsEnum? sms = default(SmsEnum?), MmsEnum? mms = default(MmsEnum?), Object changeRegionOrderId = default(Object), Object changeRegionOrderDate = default(Object), Object directoryListing = default(Object), Object directoryListingOrderId = default(Object), Object directoryListingOrderDate = default(Object), Object callerName = default(Object), Object callerNameOrderId = default(Object), Object callerNameOrderDate = default(Object), Object e911 = default(Object), Object e911OrderId = default(Object), Object e911OrderDate = default(Object), Object messageCampaign = default(Object), MessageClassEnum? messageClass = default(MessageClassEnum?), MessageTypeEnum? messageType = default(MessageTypeEnum?), Object messageCampaignOrderId = default(Object), Object messageCampaignOrderDate = default(Object), E911SupportedEnum? e911Supported = default(E911SupportedEnum?), CallerNameSupportedEnum? callerNameSupported = default(CallerNameSupportedEnum?), DirectoryListingSupportedEnum? directoryListingSupported = default(DirectoryListingSupportedEnum?), MessagingSupportedEnum? messagingSupported = default(MessagingSupportedEnum?), DestinationTypeEnum destinationType = default(DestinationTypeEnum), Object destination = default(Object), Object _ref = default(Object), Object callForwardingDestination = default(Object))
        {
            this.InUse = inUse;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Numbers and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            this.Name = name;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new InvalidDataException("countryCode is a required property for Numbers and cannot be null");
            }
            else
            {
                this.CountryCode = countryCode;
            }

            this.CountryCode = countryCode;
            this.Amount = amount;
            this.PerMinuteRate = perMinuteRate;
            // to ensure "provider" is required (not null)
            if (provider == null)
            {
                throw new InvalidDataException("provider is a required property for Numbers and cannot be null");
            }
            else
            {
                this.Provider = provider;
            }

            this.Provider = provider;
            this.OriginalProvider = originalProvider;
            this.ProviderOrderId = providerOrderId;
            this.Fax = fax;
            this.Voice = voice;
            this.Status = status;
            this.Sms = sms;
            this.Mms = mms;
            this.ChangeRegionOrderId = changeRegionOrderId;
            this.ChangeRegionOrderDate = changeRegionOrderDate;
            this.DirectoryListing = directoryListing;
            this.DirectoryListingOrderId = directoryListingOrderId;
            this.DirectoryListingOrderDate = directoryListingOrderDate;
            this.CallerName = callerName;
            this.CallerNameOrderId = callerNameOrderId;
            this.CallerNameOrderDate = callerNameOrderDate;
            this.E911 = e911;
            this.E911OrderId = e911OrderId;
            this.E911OrderDate = e911OrderDate;
            this.MessageCampaign = messageCampaign;
            this.MessageClass = messageClass;
            this.MessageType = messageType;
            this.MessageCampaignOrderId = messageCampaignOrderId;
            this.MessageCampaignOrderDate = messageCampaignOrderDate;
            this.E911Supported = e911Supported;
            this.CallerNameSupported = callerNameSupported;
            this.DirectoryListingSupported = directoryListingSupported;
            this.MessagingSupported = messagingSupported;
            // to ensure "destinationType" is required (not null)
            if (destinationType == null)
            {
                throw new InvalidDataException("destinationType is a required property for Numbers and cannot be null");
            }
            else
            {
                this.DestinationType = destinationType;
            }

            this.DestinationType = destinationType;
            this.Destination = destination;
            this.Ref = _ref;
            this.CallForwardingDestination = callForwardingDestination;
            this.InUse = inUse;
            this.Amount = amount;
            this.PerMinuteRate = perMinuteRate;
            this.OriginalProvider = originalProvider;
            this.ProviderOrderId = providerOrderId;
            this.Fax = fax;
            this.Voice = voice;
            this.Status = status;
            this.Sms = sms;
            this.Mms = mms;
            this.ChangeRegionOrderId = changeRegionOrderId;
            this.ChangeRegionOrderDate = changeRegionOrderDate;
            this.DirectoryListing = directoryListing;
            this.DirectoryListingOrderId = directoryListingOrderId;
            this.DirectoryListingOrderDate = directoryListingOrderDate;
            this.CallerName = callerName;
            this.CallerNameOrderId = callerNameOrderId;
            this.CallerNameOrderDate = callerNameOrderDate;
            this.E911 = e911;
            this.E911OrderId = e911OrderId;
            this.E911OrderDate = e911OrderDate;
            this.MessageCampaign = messageCampaign;
            this.MessageClass = messageClass;
            this.MessageType = messageType;
            this.MessageCampaignOrderId = messageCampaignOrderId;
            this.MessageCampaignOrderDate = messageCampaignOrderDate;
            this.E911Supported = e911Supported;
            this.CallerNameSupported = callerNameSupported;
            this.DirectoryListingSupported = directoryListingSupported;
            this.MessagingSupported = messagingSupported;
            this.Destination = destination;
            this.Ref = _ref;
            this.CallForwardingDestination = callForwardingDestination;
        }


        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public Object Name { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="countryCode", EmitDefaultValue=true)]
        public Object CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public Object Amount { get; set; }

        /// <summary>
        /// Gets or Sets PerMinuteRate
        /// </summary>
        [DataMember(Name="perMinuteRate", EmitDefaultValue=true)]
        public Object PerMinuteRate { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="provider", EmitDefaultValue=true)]
        public Object Provider { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="originalProvider", EmitDefaultValue=true)]
        public Object OriginalProvider { get; set; }

        /// <summary>
        /// Gets or Sets ProviderOrderId
        /// </summary>
        [DataMember(Name="providerOrderId", EmitDefaultValue=true)]
        public Object ProviderOrderId { get; set; }






        /// <summary>
        /// Gets or Sets ChangeRegionOrderId
        /// </summary>
        [DataMember(Name="changeRegionOrderId", EmitDefaultValue=true)]
        public Object ChangeRegionOrderId { get; set; }

        /// <summary>
        /// Gets or Sets ChangeRegionOrderDate
        /// </summary>
        [DataMember(Name="changeRegionOrderDate", EmitDefaultValue=true)]
        public Object ChangeRegionOrderDate { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="directoryListing", EmitDefaultValue=true)]
        public Object DirectoryListing { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryListingOrderId
        /// </summary>
        [DataMember(Name="directoryListingOrderId", EmitDefaultValue=true)]
        public Object DirectoryListingOrderId { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryListingOrderDate
        /// </summary>
        [DataMember(Name="directoryListingOrderDate", EmitDefaultValue=true)]
        public Object DirectoryListingOrderDate { get; set; }

        /// <summary>
        /// Gets or Sets CallerName
        /// </summary>
        [DataMember(Name="callerName", EmitDefaultValue=true)]
        public Object CallerName { get; set; }

        /// <summary>
        /// Gets or Sets CallerNameOrderId
        /// </summary>
        [DataMember(Name="callerNameOrderId", EmitDefaultValue=true)]
        public Object CallerNameOrderId { get; set; }

        /// <summary>
        /// Gets or Sets CallerNameOrderDate
        /// </summary>
        [DataMember(Name="callerNameOrderDate", EmitDefaultValue=true)]
        public Object CallerNameOrderDate { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="e911", EmitDefaultValue=true)]
        public Object E911 { get; set; }

        /// <summary>
        /// Gets or Sets E911OrderId
        /// </summary>
        [DataMember(Name="e911OrderId", EmitDefaultValue=true)]
        public Object E911OrderId { get; set; }

        /// <summary>
        /// Gets or Sets E911OrderDate
        /// </summary>
        [DataMember(Name="e911OrderDate", EmitDefaultValue=true)]
        public Object E911OrderDate { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="messageCampaign", EmitDefaultValue=true)]
        public Object MessageCampaign { get; set; }



        /// <summary>
        /// Gets or Sets MessageCampaignOrderId
        /// </summary>
        [DataMember(Name="messageCampaignOrderId", EmitDefaultValue=true)]
        public Object MessageCampaignOrderId { get; set; }

        /// <summary>
        /// Gets or Sets MessageCampaignOrderDate
        /// </summary>
        [DataMember(Name="messageCampaignOrderDate", EmitDefaultValue=true)]
        public Object MessageCampaignOrderDate { get; set; }






        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="destination", EmitDefaultValue=true)]
        public Object Destination { get; set; }

        /// <summary>
        /// Gets or Sets Ref
        /// </summary>
        [DataMember(Name="ref", EmitDefaultValue=true)]
        public Object Ref { get; set; }

        /// <summary>
        /// Gets or Sets CallForwardingDestination
        /// </summary>
        [DataMember(Name="callForwardingDestination", EmitDefaultValue=true)]
        public Object CallForwardingDestination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Numbers {\n");
            sb.Append("  InUse: ").Append(InUse).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PerMinuteRate: ").Append(PerMinuteRate).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  OriginalProvider: ").Append(OriginalProvider).Append("\n");
            sb.Append("  ProviderOrderId: ").Append(ProviderOrderId).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Sms: ").Append(Sms).Append("\n");
            sb.Append("  Mms: ").Append(Mms).Append("\n");
            sb.Append("  ChangeRegionOrderId: ").Append(ChangeRegionOrderId).Append("\n");
            sb.Append("  ChangeRegionOrderDate: ").Append(ChangeRegionOrderDate).Append("\n");
            sb.Append("  DirectoryListing: ").Append(DirectoryListing).Append("\n");
            sb.Append("  DirectoryListingOrderId: ").Append(DirectoryListingOrderId).Append("\n");
            sb.Append("  DirectoryListingOrderDate: ").Append(DirectoryListingOrderDate).Append("\n");
            sb.Append("  CallerName: ").Append(CallerName).Append("\n");
            sb.Append("  CallerNameOrderId: ").Append(CallerNameOrderId).Append("\n");
            sb.Append("  CallerNameOrderDate: ").Append(CallerNameOrderDate).Append("\n");
            sb.Append("  E911: ").Append(E911).Append("\n");
            sb.Append("  E911OrderId: ").Append(E911OrderId).Append("\n");
            sb.Append("  E911OrderDate: ").Append(E911OrderDate).Append("\n");
            sb.Append("  MessageCampaign: ").Append(MessageCampaign).Append("\n");
            sb.Append("  MessageClass: ").Append(MessageClass).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  MessageCampaignOrderId: ").Append(MessageCampaignOrderId).Append("\n");
            sb.Append("  MessageCampaignOrderDate: ").Append(MessageCampaignOrderDate).Append("\n");
            sb.Append("  E911Supported: ").Append(E911Supported).Append("\n");
            sb.Append("  CallerNameSupported: ").Append(CallerNameSupported).Append("\n");
            sb.Append("  DirectoryListingSupported: ").Append(DirectoryListingSupported).Append("\n");
            sb.Append("  MessagingSupported: ").Append(MessagingSupported).Append("\n");
            sb.Append("  DestinationType: ").Append(DestinationType).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("  CallForwardingDestination: ").Append(CallForwardingDestination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Numbers);
        }

        /// <summary>
        /// Returns true if Numbers instances are equal
        /// </summary>
        /// <param name="input">Instance of Numbers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Numbers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InUse == input.InUse ||
                    (this.InUse != null &&
                    this.InUse.Equals(input.InUse))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.PerMinuteRate == input.PerMinuteRate ||
                    (this.PerMinuteRate != null &&
                    this.PerMinuteRate.Equals(input.PerMinuteRate))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.OriginalProvider == input.OriginalProvider ||
                    (this.OriginalProvider != null &&
                    this.OriginalProvider.Equals(input.OriginalProvider))
                ) && 
                (
                    this.ProviderOrderId == input.ProviderOrderId ||
                    (this.ProviderOrderId != null &&
                    this.ProviderOrderId.Equals(input.ProviderOrderId))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.Voice == input.Voice ||
                    (this.Voice != null &&
                    this.Voice.Equals(input.Voice))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Sms == input.Sms ||
                    (this.Sms != null &&
                    this.Sms.Equals(input.Sms))
                ) && 
                (
                    this.Mms == input.Mms ||
                    (this.Mms != null &&
                    this.Mms.Equals(input.Mms))
                ) && 
                (
                    this.ChangeRegionOrderId == input.ChangeRegionOrderId ||
                    (this.ChangeRegionOrderId != null &&
                    this.ChangeRegionOrderId.Equals(input.ChangeRegionOrderId))
                ) && 
                (
                    this.ChangeRegionOrderDate == input.ChangeRegionOrderDate ||
                    (this.ChangeRegionOrderDate != null &&
                    this.ChangeRegionOrderDate.Equals(input.ChangeRegionOrderDate))
                ) && 
                (
                    this.DirectoryListing == input.DirectoryListing ||
                    (this.DirectoryListing != null &&
                    this.DirectoryListing.Equals(input.DirectoryListing))
                ) && 
                (
                    this.DirectoryListingOrderId == input.DirectoryListingOrderId ||
                    (this.DirectoryListingOrderId != null &&
                    this.DirectoryListingOrderId.Equals(input.DirectoryListingOrderId))
                ) && 
                (
                    this.DirectoryListingOrderDate == input.DirectoryListingOrderDate ||
                    (this.DirectoryListingOrderDate != null &&
                    this.DirectoryListingOrderDate.Equals(input.DirectoryListingOrderDate))
                ) && 
                (
                    this.CallerName == input.CallerName ||
                    (this.CallerName != null &&
                    this.CallerName.Equals(input.CallerName))
                ) && 
                (
                    this.CallerNameOrderId == input.CallerNameOrderId ||
                    (this.CallerNameOrderId != null &&
                    this.CallerNameOrderId.Equals(input.CallerNameOrderId))
                ) && 
                (
                    this.CallerNameOrderDate == input.CallerNameOrderDate ||
                    (this.CallerNameOrderDate != null &&
                    this.CallerNameOrderDate.Equals(input.CallerNameOrderDate))
                ) && 
                (
                    this.E911 == input.E911 ||
                    (this.E911 != null &&
                    this.E911.Equals(input.E911))
                ) && 
                (
                    this.E911OrderId == input.E911OrderId ||
                    (this.E911OrderId != null &&
                    this.E911OrderId.Equals(input.E911OrderId))
                ) && 
                (
                    this.E911OrderDate == input.E911OrderDate ||
                    (this.E911OrderDate != null &&
                    this.E911OrderDate.Equals(input.E911OrderDate))
                ) && 
                (
                    this.MessageCampaign == input.MessageCampaign ||
                    (this.MessageCampaign != null &&
                    this.MessageCampaign.Equals(input.MessageCampaign))
                ) && 
                (
                    this.MessageClass == input.MessageClass ||
                    (this.MessageClass != null &&
                    this.MessageClass.Equals(input.MessageClass))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.MessageCampaignOrderId == input.MessageCampaignOrderId ||
                    (this.MessageCampaignOrderId != null &&
                    this.MessageCampaignOrderId.Equals(input.MessageCampaignOrderId))
                ) && 
                (
                    this.MessageCampaignOrderDate == input.MessageCampaignOrderDate ||
                    (this.MessageCampaignOrderDate != null &&
                    this.MessageCampaignOrderDate.Equals(input.MessageCampaignOrderDate))
                ) && 
                (
                    this.E911Supported == input.E911Supported ||
                    (this.E911Supported != null &&
                    this.E911Supported.Equals(input.E911Supported))
                ) && 
                (
                    this.CallerNameSupported == input.CallerNameSupported ||
                    (this.CallerNameSupported != null &&
                    this.CallerNameSupported.Equals(input.CallerNameSupported))
                ) && 
                (
                    this.DirectoryListingSupported == input.DirectoryListingSupported ||
                    (this.DirectoryListingSupported != null &&
                    this.DirectoryListingSupported.Equals(input.DirectoryListingSupported))
                ) && 
                (
                    this.MessagingSupported == input.MessagingSupported ||
                    (this.MessagingSupported != null &&
                    this.MessagingSupported.Equals(input.MessagingSupported))
                ) && 
                (
                    this.DestinationType == input.DestinationType ||
                    (this.DestinationType != null &&
                    this.DestinationType.Equals(input.DestinationType))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.Ref == input.Ref ||
                    (this.Ref != null &&
                    this.Ref.Equals(input.Ref))
                ) && 
                (
                    this.CallForwardingDestination == input.CallForwardingDestination ||
                    (this.CallForwardingDestination != null &&
                    this.CallForwardingDestination.Equals(input.CallForwardingDestination))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InUse != null)
                    hashCode = hashCode * 59 + this.InUse.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.PerMinuteRate != null)
                    hashCode = hashCode * 59 + this.PerMinuteRate.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.OriginalProvider != null)
                    hashCode = hashCode * 59 + this.OriginalProvider.GetHashCode();
                if (this.ProviderOrderId != null)
                    hashCode = hashCode * 59 + this.ProviderOrderId.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.Voice != null)
                    hashCode = hashCode * 59 + this.Voice.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Sms != null)
                    hashCode = hashCode * 59 + this.Sms.GetHashCode();
                if (this.Mms != null)
                    hashCode = hashCode * 59 + this.Mms.GetHashCode();
                if (this.ChangeRegionOrderId != null)
                    hashCode = hashCode * 59 + this.ChangeRegionOrderId.GetHashCode();
                if (this.ChangeRegionOrderDate != null)
                    hashCode = hashCode * 59 + this.ChangeRegionOrderDate.GetHashCode();
                if (this.DirectoryListing != null)
                    hashCode = hashCode * 59 + this.DirectoryListing.GetHashCode();
                if (this.DirectoryListingOrderId != null)
                    hashCode = hashCode * 59 + this.DirectoryListingOrderId.GetHashCode();
                if (this.DirectoryListingOrderDate != null)
                    hashCode = hashCode * 59 + this.DirectoryListingOrderDate.GetHashCode();
                if (this.CallerName != null)
                    hashCode = hashCode * 59 + this.CallerName.GetHashCode();
                if (this.CallerNameOrderId != null)
                    hashCode = hashCode * 59 + this.CallerNameOrderId.GetHashCode();
                if (this.CallerNameOrderDate != null)
                    hashCode = hashCode * 59 + this.CallerNameOrderDate.GetHashCode();
                if (this.E911 != null)
                    hashCode = hashCode * 59 + this.E911.GetHashCode();
                if (this.E911OrderId != null)
                    hashCode = hashCode * 59 + this.E911OrderId.GetHashCode();
                if (this.E911OrderDate != null)
                    hashCode = hashCode * 59 + this.E911OrderDate.GetHashCode();
                if (this.MessageCampaign != null)
                    hashCode = hashCode * 59 + this.MessageCampaign.GetHashCode();
                if (this.MessageClass != null)
                    hashCode = hashCode * 59 + this.MessageClass.GetHashCode();
                if (this.MessageType != null)
                    hashCode = hashCode * 59 + this.MessageType.GetHashCode();
                if (this.MessageCampaignOrderId != null)
                    hashCode = hashCode * 59 + this.MessageCampaignOrderId.GetHashCode();
                if (this.MessageCampaignOrderDate != null)
                    hashCode = hashCode * 59 + this.MessageCampaignOrderDate.GetHashCode();
                if (this.E911Supported != null)
                    hashCode = hashCode * 59 + this.E911Supported.GetHashCode();
                if (this.CallerNameSupported != null)
                    hashCode = hashCode * 59 + this.CallerNameSupported.GetHashCode();
                if (this.DirectoryListingSupported != null)
                    hashCode = hashCode * 59 + this.DirectoryListingSupported.GetHashCode();
                if (this.MessagingSupported != null)
                    hashCode = hashCode * 59 + this.MessagingSupported.GetHashCode();
                if (this.DestinationType != null)
                    hashCode = hashCode * 59 + this.DestinationType.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.Ref != null)
                    hashCode = hashCode * 59 + this.Ref.GetHashCode();
                if (this.CallForwardingDestination != null)
                    hashCode = hashCode * 59 + this.CallForwardingDestination.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (Object) maxLength
            if(this.Name != null && this.Name.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 20.", new [] { "Name" });
            }

            // Name (Object) minLength
            if(this.Name != null && this.Name.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 10.", new [] { "Name" });
            }

            // CountryCode (Object) maxLength
            if(this.CountryCode != null && this.CountryCode.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, length must be less than 4.", new [] { "CountryCode" });
            }

            // CountryCode (Object) minLength
            if(this.CountryCode != null && this.CountryCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, length must be greater than 1.", new [] { "CountryCode" });
            }

            // ProviderOrderId (Object) maxLength
            if(this.ProviderOrderId != null && this.ProviderOrderId.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProviderOrderId, length must be less than 45.", new [] { "ProviderOrderId" });
            }


            // ChangeRegionOrderId (Object) maxLength
            if(this.ChangeRegionOrderId != null && this.ChangeRegionOrderId.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChangeRegionOrderId, length must be less than 45.", new [] { "ChangeRegionOrderId" });
            }

            // ChangeRegionOrderId (Object) minLength
            if(this.ChangeRegionOrderId != null && this.ChangeRegionOrderId.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChangeRegionOrderId, length must be greater than 5.", new [] { "ChangeRegionOrderId" });
            }

            // DirectoryListingOrderId (Object) maxLength
            if(this.DirectoryListingOrderId != null && this.DirectoryListingOrderId.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirectoryListingOrderId, length must be less than 45.", new [] { "DirectoryListingOrderId" });
            }

            // DirectoryListingOrderId (Object) minLength
            if(this.DirectoryListingOrderId != null && this.DirectoryListingOrderId.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirectoryListingOrderId, length must be greater than 5.", new [] { "DirectoryListingOrderId" });
            }

            // CallerName (Object) maxLength
            if(this.CallerName != null && this.CallerName.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallerName, length must be less than 45.", new [] { "CallerName" });
            }


            // CallerNameOrderId (Object) maxLength
            if(this.CallerNameOrderId != null && this.CallerNameOrderId.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallerNameOrderId, length must be less than 45.", new [] { "CallerNameOrderId" });
            }


            // E911OrderId (Object) maxLength
            if(this.E911OrderId != null && this.E911OrderId.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for E911OrderId, length must be less than 45.", new [] { "E911OrderId" });
            }

            // E911OrderId (Object) minLength
            if(this.E911OrderId != null && this.E911OrderId.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for E911OrderId, length must be greater than 5.", new [] { "E911OrderId" });
            }

            // MessageCampaign (Object) maxLength
            if(this.MessageCampaign != null && this.MessageCampaign.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MessageCampaign, length must be less than 45.", new [] { "MessageCampaign" });
            }


            // MessageCampaignOrderId (Object) maxLength
            if(this.MessageCampaignOrderId != null && this.MessageCampaignOrderId.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MessageCampaignOrderId, length must be less than 45.", new [] { "MessageCampaignOrderId" });
            }


            // Ref (Object) maxLength
            if(this.Ref != null && this.Ref.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ref, length must be less than 100.", new [] { "Ref" });
            }

            // Ref (Object) minLength
            if(this.Ref != null && this.Ref.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ref, length must be greater than 5.", new [] { "Ref" });
            }

            // CallForwardingDestination (Object) maxLength
            if(this.CallForwardingDestination != null && this.CallForwardingDestination.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallForwardingDestination, length must be less than 45.", new [] { "CallForwardingDestination" });
            }

            // CallForwardingDestination (Object) minLength
            if(this.CallForwardingDestination != null && this.CallForwardingDestination.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallForwardingDestination, length must be greater than 10.", new [] { "CallForwardingDestination" });
            }

            yield break;
        }
    }

}

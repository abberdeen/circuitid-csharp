/*
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!  # Clients  Discover the convenience of Circuit ID's readily available Client API libraries, enabling you to initiate seamless integration without delay. These pre-built libraries are designed for immediate use, empowering you to leverage the API's functionalities effortlessly. Get started with a Circuit ID&reg; Client library and streamline your development process today.  - <a href='https://github.com/circuitid/circuitid-node' target='_blank'>Node</a> - <a href='https://github.com/circuitid/circuitid-python' target='_blank'>Python</a> - <a href='https://github.com/circuitid/circuitid-java' target='_blank'>Java</a> - <a href='https://github.com/circuitid/circuitid-csharp' target='_blank'>C Sharp</a> - <a href='https://github.com/circuitid/circuitid-ruby' target='_blank'>Ruby</a> - <a href='https://github.com/circuitid/circuitid-go' target='_blank'>Go</a>
 *
 * The version of the OpenAPI document: 0.47.14
 * Contact: support@circuitid.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = circuitid-csharp.Client.OpenAPIDateConverter;

namespace circuitid-csharp.CircuitID
{
    /// <summary>
    /// Chatrooms
    /// </summary>
    [DataContract]
    public partial class Chatrooms :  IEquatable<Chatrooms>, IValidatableObject
    {
        /// <summary>
        /// Defines Direct
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectEnum
        {
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            True = true,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            False = false

        }

        /// <summary>
        /// Gets or Sets Direct
        /// </summary>
        [DataMember(Name="direct", EmitDefaultValue=true)]
        public DirectEnum? Direct { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Chatrooms" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Chatrooms() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Chatrooms" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="users">users (required).</param>
        /// <param name="avatar">avatar.</param>
        /// <param name="direct">direct.</param>
        public Chatrooms(Object name = default(Object), Object users = default(Object), Object avatar = default(Object), DirectEnum? direct = default(DirectEnum?))
        {
            this.Name = name;
            // to ensure "users" is required (not null)
            if (users == null)
            {
                throw new InvalidDataException("users is a required property for Chatrooms and cannot be null");
            }
            else
            {
                this.Users = users;
            }

            this.Users = users;
            this.Avatar = avatar;
            this.Direct = direct;
            this.Name = name;
            this.Avatar = avatar;
            this.Direct = direct;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public Object Name { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name="users", EmitDefaultValue=true)]
        public Object Users { get; set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [DataMember(Name="avatar", EmitDefaultValue=true)]
        public Object Avatar { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Chatrooms {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Direct: ").Append(Direct).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Chatrooms);
        }

        /// <summary>
        /// Returns true if Chatrooms instances are equal
        /// </summary>
        /// <param name="input">Instance of Chatrooms to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Chatrooms input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Users == input.Users ||
                    (this.Users != null &&
                    this.Users.Equals(input.Users))
                ) && 
                (
                    this.Avatar == input.Avatar ||
                    (this.Avatar != null &&
                    this.Avatar.Equals(input.Avatar))
                ) && 
                (
                    this.Direct == input.Direct ||
                    (this.Direct != null &&
                    this.Direct.Equals(input.Direct))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.Avatar != null)
                    hashCode = hashCode * 59 + this.Avatar.GetHashCode();
                if (this.Direct != null)
                    hashCode = hashCode * 59 + this.Direct.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (Object) maxLength
            if(this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }


            // Avatar (Object) maxLength
            if(this.Avatar != null && this.Avatar.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Avatar, length must be less than 512.", new [] { "Avatar" });
            }


            yield break;
        }
    }

}

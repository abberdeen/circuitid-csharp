/*
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.8
 * Contact: support@circuitid.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = circuitid-csharp.Client.OpenAPIDateConverter;

namespace circuitid-csharp.CircuitID
{
    /// <summary>
    /// Offices
    /// </summary>
    [DataContract]
    public partial class Offices :  IEquatable<Offices>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Offices" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Offices() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Offices" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="streetNumber">streetNumber (required).</param>
        /// <param name="streetName">streetName (required).</param>
        /// <param name="preDirection">preDirection.</param>
        /// <param name="streetSuffix">streetSuffix (required).</param>
        /// <param name="city">city (required).</param>
        /// <param name="state">state.</param>
        /// <param name="zip">ObjectId (unique 12 bytes ID).</param>
        /// <param name="zipCode">zipCode.</param>
        /// <param name="address2">address2.</param>
        /// <param name="country">country (required).</param>
        /// <param name="providers">providers.</param>
        /// <param name="region">ObjectId (unique 12 bytes ID).</param>
        public Offices(Object name = default(Object), Object streetNumber = default(Object), Object streetName = default(Object), Object preDirection = default(Object), Object streetSuffix = default(Object), Object city = default(Object), Object state = default(Object), Object zip = default(Object), Object zipCode = default(Object), Object address2 = default(Object), Object country = default(Object), Object providers = default(Object), Object region = default(Object))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Offices and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            this.Name = name;
            // to ensure "streetNumber" is required (not null)
            if (streetNumber == null)
            {
                throw new InvalidDataException("streetNumber is a required property for Offices and cannot be null");
            }
            else
            {
                this.StreetNumber = streetNumber;
            }

            this.StreetNumber = streetNumber;
            // to ensure "streetName" is required (not null)
            if (streetName == null)
            {
                throw new InvalidDataException("streetName is a required property for Offices and cannot be null");
            }
            else
            {
                this.StreetName = streetName;
            }

            this.StreetName = streetName;
            this.PreDirection = preDirection;
            // to ensure "streetSuffix" is required (not null)
            if (streetSuffix == null)
            {
                throw new InvalidDataException("streetSuffix is a required property for Offices and cannot be null");
            }
            else
            {
                this.StreetSuffix = streetSuffix;
            }

            this.StreetSuffix = streetSuffix;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new InvalidDataException("city is a required property for Offices and cannot be null");
            }
            else
            {
                this.City = city;
            }

            this.City = city;
            this.State = state;
            this.Zip = zip;
            this.ZipCode = zipCode;
            this.Address2 = address2;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for Offices and cannot be null");
            }
            else
            {
                this.Country = country;
            }

            this.Country = country;
            this.Providers = providers;
            this.Region = region;
            this.PreDirection = preDirection;
            this.State = state;
            this.Zip = zip;
            this.ZipCode = zipCode;
            this.Address2 = address2;
            this.Providers = providers;
            this.Region = region;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public Object Name { get; set; }

        /// <summary>
        /// Gets or Sets StreetNumber
        /// </summary>
        [DataMember(Name="streetNumber", EmitDefaultValue=true)]
        public Object StreetNumber { get; set; }

        /// <summary>
        /// Gets or Sets StreetName
        /// </summary>
        [DataMember(Name="streetName", EmitDefaultValue=true)]
        public Object StreetName { get; set; }

        /// <summary>
        /// Gets or Sets PreDirection
        /// </summary>
        [DataMember(Name="preDirection", EmitDefaultValue=true)]
        public Object PreDirection { get; set; }

        /// <summary>
        /// Gets or Sets StreetSuffix
        /// </summary>
        [DataMember(Name="streetSuffix", EmitDefaultValue=true)]
        public Object StreetSuffix { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=true)]
        public Object City { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=true)]
        public Object State { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="zip", EmitDefaultValue=true)]
        public Object Zip { get; set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [DataMember(Name="zipCode", EmitDefaultValue=true)]
        public Object ZipCode { get; set; }

        /// <summary>
        /// Gets or Sets Address2
        /// </summary>
        [DataMember(Name="address2", EmitDefaultValue=true)]
        public Object Address2 { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=true)]
        public Object Country { get; set; }

        /// <summary>
        /// Gets or Sets Providers
        /// </summary>
        [DataMember(Name="providers", EmitDefaultValue=true)]
        public Object Providers { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="region", EmitDefaultValue=true)]
        public Object Region { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Offices {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  PreDirection: ").Append(PreDirection).Append("\n");
            sb.Append("  StreetSuffix: ").Append(StreetSuffix).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Providers: ").Append(Providers).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Offices);
        }

        /// <summary>
        /// Returns true if Offices instances are equal
        /// </summary>
        /// <param name="input">Instance of Offices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Offices input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.PreDirection == input.PreDirection ||
                    (this.PreDirection != null &&
                    this.PreDirection.Equals(input.PreDirection))
                ) && 
                (
                    this.StreetSuffix == input.StreetSuffix ||
                    (this.StreetSuffix != null &&
                    this.StreetSuffix.Equals(input.StreetSuffix))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Providers == input.Providers ||
                    (this.Providers != null &&
                    this.Providers.Equals(input.Providers))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.PreDirection != null)
                    hashCode = hashCode * 59 + this.PreDirection.GetHashCode();
                if (this.StreetSuffix != null)
                    hashCode = hashCode * 59 + this.StreetSuffix.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Zip != null)
                    hashCode = hashCode * 59 + this.Zip.GetHashCode();
                if (this.ZipCode != null)
                    hashCode = hashCode * 59 + this.ZipCode.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Providers != null)
                    hashCode = hashCode * 59 + this.Providers.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (Object) maxLength
            if(this.Name != null && this.Name.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 45.", new [] { "Name" });
            }


            // StreetNumber (Object) maxLength
            if(this.StreetNumber != null && this.StreetNumber.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StreetNumber, length must be less than 45.", new [] { "StreetNumber" });
            }


            // StreetName (Object) maxLength
            if(this.StreetName != null && this.StreetName.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StreetName, length must be less than 20.", new [] { "StreetName" });
            }


            // PreDirection (Object) maxLength
            if(this.PreDirection != null && this.PreDirection.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PreDirection, length must be less than 2.", new [] { "PreDirection" });
            }


            // StreetSuffix (Object) maxLength
            if(this.StreetSuffix != null && this.StreetSuffix.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StreetSuffix, length must be less than 4.", new [] { "StreetSuffix" });
            }

            // StreetSuffix (Object) minLength
            if(this.StreetSuffix != null && this.StreetSuffix.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StreetSuffix, length must be greater than 2.", new [] { "StreetSuffix" });
            }

            // City (Object) maxLength
            if(this.City != null && this.City.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for City, length must be less than 45.", new [] { "City" });
            }


            // State (Object) maxLength
            if(this.State != null && this.State.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for State, length must be less than 45.", new [] { "State" });
            }


            // ZipCode (Object) maxLength
            if(this.ZipCode != null && this.ZipCode.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ZipCode, length must be less than 45.", new [] { "ZipCode" });
            }


            // Address2 (Object) maxLength
            if(this.Address2 != null && this.Address2.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Address2, length must be less than 45.", new [] { "Address2" });
            }


            // Country (Object) maxLength
            if(this.Country != null && this.Country.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be less than 2.", new [] { "Country" });
            }

            // Country (Object) minLength
            if(this.Country != null && this.Country.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be greater than 2.", new [] { "Country" });
            }

            yield break;
        }
    }

}

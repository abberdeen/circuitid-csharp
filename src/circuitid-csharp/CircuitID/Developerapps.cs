/*
 * Circuit ID REST API
 *
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!  # Clients  Discover the convenience of Circuit ID's readily available Client API libraries, enabling you to initiate seamless integration without delay. These pre-built libraries are designed for immediate use, empowering you to leverage the API's functionalities effortlessly. Get started with a Circuit ID&reg; Client library and streamline your development process today.  - <a href='https://github.com/circuitid/circuitid-node' target='_blank'>Node</a> - <a href='https://github.com/circuitid/circuitid-python' target='_blank'>Python</a> - <a href='https://github.com/circuitid/circuitid-java' target='_blank'>Java</a> - <a href='https://github.com/circuitid/circuitid-csharp' target='_blank'>C Sharp</a> - <a href='https://github.com/circuitid/circuitid-ruby' target='_blank'>Ruby</a> - <a href='https://github.com/circuitid/circuitid-go' target='_blank'>Go</a>
 *
 * The version of the OpenAPI document: 0.47.14
 * Contact: support@circuitid.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = circuitid-csharp.Client.OpenAPIDateConverter;

namespace circuitid-csharp.CircuitID
{
    /// <summary>
    /// Developerapps
    /// </summary>
    [DataContract]
    public partial class Developerapps :  IEquatable<Developerapps>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Events for value: events
            /// </summary>
            Events = events

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines Visibility
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisibilityEnum
        {
            /// <summary>
            /// Enum Private for value: private
            /// </summary>
            Private = private,

            /// <summary>
            /// Enum Public for value: public
            /// </summary>
            Public = public

        }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [DataMember(Name="visibility", EmitDefaultValue=true)]
        public VisibilityEnum Visibility { get; set; }
        /// <summary>
        /// Defines RequireId
        /// </summary>
        public enum RequireIdEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 0

        }

        /// <summary>
        /// Gets or Sets RequireId
        /// </summary>
        [DataMember(Name="requireId", EmitDefaultValue=true)]
        public RequireIdEnum? RequireId { get; set; }
        /// <summary>
        /// Defines IsFree
        /// </summary>
        public enum IsFreeEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            _0 = 0

        }

        /// <summary>
        /// Gets or Sets IsFree
        /// </summary>
        [DataMember(Name="isFree", EmitDefaultValue=true)]
        public IsFreeEnum? IsFree { get; set; }
        /// <summary>
        /// Defines IntegrationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntegrationTypeEnum
        {
            /// <summary>
            /// Enum Webhook for value: webhook
            /// </summary>
            Webhook = webhook,

            /// <summary>
            /// Enum Client for value: client
            /// </summary>
            Client = client

        }

        /// <summary>
        /// Gets or Sets IntegrationType
        /// </summary>
        [DataMember(Name="integrationType", EmitDefaultValue=true)]
        public IntegrationTypeEnum IntegrationType { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            Active = active,

            /// <summary>
            /// Enum Disabled for value: disabled
            /// </summary>
            Disabled = disabled,

            /// <summary>
            /// Enum Suspended for value: suspended
            /// </summary>
            Suspended = suspended,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            Error = error,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = pending

        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Defines WebhookAuthType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WebhookAuthTypeEnum
        {
            /// <summary>
            /// Enum Header for value: header
            /// </summary>
            Header = header,

            /// <summary>
            /// Enum UsernameAndPassword for value: usernameAndPassword
            /// </summary>
            UsernameAndPassword = usernameAndPassword

        }

        /// <summary>
        /// Gets or Sets WebhookAuthType
        /// </summary>
        [DataMember(Name="webhookAuthType", EmitDefaultValue=true)]
        public WebhookAuthTypeEnum? WebhookAuthType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Developerapps" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Developerapps() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Developerapps" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="type">type (required).</param>
        /// <param name="visibility">visibility (required).</param>
        /// <param name="requireId">requireId.</param>
        /// <param name="isFree">isFree.</param>
        /// <param name="feeDescription">feeDescription.</param>
        /// <param name="integrationType">integrationType (required).</param>
        /// <param name="services">services (required).</param>
        /// <param name="events">events.</param>
        /// <param name="user">ObjectId (unique 12 bytes ID) (required).</param>
        /// <param name="webhookUrl">webhookUrl.</param>
        /// <param name="termsOfServiceUrl">termsOfServiceUrl.</param>
        /// <param name="privacyPolicyUrl">privacyPolicyUrl.</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="status">status (required).</param>
        /// <param name="webhookAuthType">webhookAuthType.</param>
        /// <param name="webhookUsername">webhookUsername.</param>
        /// <param name="webhookPassword">webhookPassword.</param>
        /// <param name="webhookTokenName">webhookTokenName.</param>
        /// <param name="webhookToken">webhookToken.</param>
        public Developerapps(Object name = default(Object), Object description = default(Object), TypeEnum type = default(TypeEnum), VisibilityEnum visibility = default(VisibilityEnum), RequireIdEnum? requireId = default(RequireIdEnum?), IsFreeEnum? isFree = default(IsFreeEnum?), Object feeDescription = default(Object), IntegrationTypeEnum integrationType = default(IntegrationTypeEnum), Object services = default(Object), Object events = default(Object), Object user = default(Object), Object webhookUrl = default(Object), Object termsOfServiceUrl = default(Object), Object privacyPolicyUrl = default(Object), Object permissions = default(Object), StatusEnum status = default(StatusEnum), WebhookAuthTypeEnum? webhookAuthType = default(WebhookAuthTypeEnum?), Object webhookUsername = default(Object), Object webhookPassword = default(Object), Object webhookTokenName = default(Object), Object webhookToken = default(Object))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Developerapps and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            this.Name = name;
            this.Description = description;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Developerapps and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            this.Type = type;
            // to ensure "visibility" is required (not null)
            if (visibility == null)
            {
                throw new InvalidDataException("visibility is a required property for Developerapps and cannot be null");
            }
            else
            {
                this.Visibility = visibility;
            }

            this.Visibility = visibility;
            this.RequireId = requireId;
            this.IsFree = isFree;
            this.FeeDescription = feeDescription;
            // to ensure "integrationType" is required (not null)
            if (integrationType == null)
            {
                throw new InvalidDataException("integrationType is a required property for Developerapps and cannot be null");
            }
            else
            {
                this.IntegrationType = integrationType;
            }

            this.IntegrationType = integrationType;
            // to ensure "services" is required (not null)
            if (services == null)
            {
                throw new InvalidDataException("services is a required property for Developerapps and cannot be null");
            }
            else
            {
                this.Services = services;
            }

            this.Services = services;
            this.Events = events;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for Developerapps and cannot be null");
            }
            else
            {
                this.User = user;
            }

            this.User = user;
            this.WebhookUrl = webhookUrl;
            this.TermsOfServiceUrl = termsOfServiceUrl;
            this.PrivacyPolicyUrl = privacyPolicyUrl;
            this.Permissions = permissions;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for Developerapps and cannot be null");
            }
            else
            {
                this.Status = status;
            }

            this.Status = status;
            this.WebhookAuthType = webhookAuthType;
            this.WebhookUsername = webhookUsername;
            this.WebhookPassword = webhookPassword;
            this.WebhookTokenName = webhookTokenName;
            this.WebhookToken = webhookToken;
            this.Description = description;
            this.RequireId = requireId;
            this.IsFree = isFree;
            this.FeeDescription = feeDescription;
            this.Events = events;
            this.WebhookUrl = webhookUrl;
            this.TermsOfServiceUrl = termsOfServiceUrl;
            this.PrivacyPolicyUrl = privacyPolicyUrl;
            this.Permissions = permissions;
            this.WebhookAuthType = webhookAuthType;
            this.WebhookUsername = webhookUsername;
            this.WebhookPassword = webhookPassword;
            this.WebhookTokenName = webhookTokenName;
            this.WebhookToken = webhookToken;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public Object Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public Object Description { get; set; }





        /// <summary>
        /// Gets or Sets FeeDescription
        /// </summary>
        [DataMember(Name="feeDescription", EmitDefaultValue=true)]
        public Object FeeDescription { get; set; }


        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="services", EmitDefaultValue=true)]
        public Object Services { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name="events", EmitDefaultValue=true)]
        public Object Events { get; set; }

        /// <summary>
        /// ObjectId (unique 12 bytes ID)
        /// </summary>
        /// <value>ObjectId (unique 12 bytes ID)</value>
        [DataMember(Name="user", EmitDefaultValue=true)]
        public Object User { get; set; }

        /// <summary>
        /// Gets or Sets WebhookUrl
        /// </summary>
        [DataMember(Name="webhookUrl", EmitDefaultValue=true)]
        public Object WebhookUrl { get; set; }

        /// <summary>
        /// Gets or Sets TermsOfServiceUrl
        /// </summary>
        [DataMember(Name="termsOfServiceUrl", EmitDefaultValue=true)]
        public Object TermsOfServiceUrl { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyPolicyUrl
        /// </summary>
        [DataMember(Name="privacyPolicyUrl", EmitDefaultValue=true)]
        public Object PrivacyPolicyUrl { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=true)]
        public Object Permissions { get; set; }



        /// <summary>
        /// Gets or Sets WebhookUsername
        /// </summary>
        [DataMember(Name="webhookUsername", EmitDefaultValue=true)]
        public Object WebhookUsername { get; set; }

        /// <summary>
        /// Gets or Sets WebhookPassword
        /// </summary>
        [DataMember(Name="webhookPassword", EmitDefaultValue=true)]
        public Object WebhookPassword { get; set; }

        /// <summary>
        /// Gets or Sets WebhookTokenName
        /// </summary>
        [DataMember(Name="webhookTokenName", EmitDefaultValue=true)]
        public Object WebhookTokenName { get; set; }

        /// <summary>
        /// Gets or Sets WebhookToken
        /// </summary>
        [DataMember(Name="webhookToken", EmitDefaultValue=true)]
        public Object WebhookToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Developerapps {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  RequireId: ").Append(RequireId).Append("\n");
            sb.Append("  IsFree: ").Append(IsFree).Append("\n");
            sb.Append("  FeeDescription: ").Append(FeeDescription).Append("\n");
            sb.Append("  IntegrationType: ").Append(IntegrationType).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  TermsOfServiceUrl: ").Append(TermsOfServiceUrl).Append("\n");
            sb.Append("  PrivacyPolicyUrl: ").Append(PrivacyPolicyUrl).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  WebhookAuthType: ").Append(WebhookAuthType).Append("\n");
            sb.Append("  WebhookUsername: ").Append(WebhookUsername).Append("\n");
            sb.Append("  WebhookPassword: ").Append(WebhookPassword).Append("\n");
            sb.Append("  WebhookTokenName: ").Append(WebhookTokenName).Append("\n");
            sb.Append("  WebhookToken: ").Append(WebhookToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Developerapps);
        }

        /// <summary>
        /// Returns true if Developerapps instances are equal
        /// </summary>
        /// <param name="input">Instance of Developerapps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Developerapps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    (this.Visibility != null &&
                    this.Visibility.Equals(input.Visibility))
                ) && 
                (
                    this.RequireId == input.RequireId ||
                    (this.RequireId != null &&
                    this.RequireId.Equals(input.RequireId))
                ) && 
                (
                    this.IsFree == input.IsFree ||
                    (this.IsFree != null &&
                    this.IsFree.Equals(input.IsFree))
                ) && 
                (
                    this.FeeDescription == input.FeeDescription ||
                    (this.FeeDescription != null &&
                    this.FeeDescription.Equals(input.FeeDescription))
                ) && 
                (
                    this.IntegrationType == input.IntegrationType ||
                    (this.IntegrationType != null &&
                    this.IntegrationType.Equals(input.IntegrationType))
                ) && 
                (
                    this.Services == input.Services ||
                    (this.Services != null &&
                    this.Services.Equals(input.Services))
                ) && 
                (
                    this.Events == input.Events ||
                    (this.Events != null &&
                    this.Events.Equals(input.Events))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.WebhookUrl == input.WebhookUrl ||
                    (this.WebhookUrl != null &&
                    this.WebhookUrl.Equals(input.WebhookUrl))
                ) && 
                (
                    this.TermsOfServiceUrl == input.TermsOfServiceUrl ||
                    (this.TermsOfServiceUrl != null &&
                    this.TermsOfServiceUrl.Equals(input.TermsOfServiceUrl))
                ) && 
                (
                    this.PrivacyPolicyUrl == input.PrivacyPolicyUrl ||
                    (this.PrivacyPolicyUrl != null &&
                    this.PrivacyPolicyUrl.Equals(input.PrivacyPolicyUrl))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    (this.Permissions != null &&
                    this.Permissions.Equals(input.Permissions))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.WebhookAuthType == input.WebhookAuthType ||
                    (this.WebhookAuthType != null &&
                    this.WebhookAuthType.Equals(input.WebhookAuthType))
                ) && 
                (
                    this.WebhookUsername == input.WebhookUsername ||
                    (this.WebhookUsername != null &&
                    this.WebhookUsername.Equals(input.WebhookUsername))
                ) && 
                (
                    this.WebhookPassword == input.WebhookPassword ||
                    (this.WebhookPassword != null &&
                    this.WebhookPassword.Equals(input.WebhookPassword))
                ) && 
                (
                    this.WebhookTokenName == input.WebhookTokenName ||
                    (this.WebhookTokenName != null &&
                    this.WebhookTokenName.Equals(input.WebhookTokenName))
                ) && 
                (
                    this.WebhookToken == input.WebhookToken ||
                    (this.WebhookToken != null &&
                    this.WebhookToken.Equals(input.WebhookToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Visibility != null)
                    hashCode = hashCode * 59 + this.Visibility.GetHashCode();
                if (this.RequireId != null)
                    hashCode = hashCode * 59 + this.RequireId.GetHashCode();
                if (this.IsFree != null)
                    hashCode = hashCode * 59 + this.IsFree.GetHashCode();
                if (this.FeeDescription != null)
                    hashCode = hashCode * 59 + this.FeeDescription.GetHashCode();
                if (this.IntegrationType != null)
                    hashCode = hashCode * 59 + this.IntegrationType.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.WebhookUrl != null)
                    hashCode = hashCode * 59 + this.WebhookUrl.GetHashCode();
                if (this.TermsOfServiceUrl != null)
                    hashCode = hashCode * 59 + this.TermsOfServiceUrl.GetHashCode();
                if (this.PrivacyPolicyUrl != null)
                    hashCode = hashCode * 59 + this.PrivacyPolicyUrl.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.WebhookAuthType != null)
                    hashCode = hashCode * 59 + this.WebhookAuthType.GetHashCode();
                if (this.WebhookUsername != null)
                    hashCode = hashCode * 59 + this.WebhookUsername.GetHashCode();
                if (this.WebhookPassword != null)
                    hashCode = hashCode * 59 + this.WebhookPassword.GetHashCode();
                if (this.WebhookTokenName != null)
                    hashCode = hashCode * 59 + this.WebhookTokenName.GetHashCode();
                if (this.WebhookToken != null)
                    hashCode = hashCode * 59 + this.WebhookToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (Object) maxLength
            if(this.Name != null && this.Name.Length > 45)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 45.", new [] { "Name" });
            }


            // Description (Object) maxLength
            if(this.Description != null && this.Description.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 4096.", new [] { "Description" });
            }


            // FeeDescription (Object) maxLength
            if(this.FeeDescription != null && this.FeeDescription.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FeeDescription, length must be less than 4096.", new [] { "FeeDescription" });
            }


            // WebhookUrl (Object) maxLength
            if(this.WebhookUrl != null && this.WebhookUrl.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WebhookUrl, length must be less than 1024.", new [] { "WebhookUrl" });
            }


            // TermsOfServiceUrl (Object) maxLength
            if(this.TermsOfServiceUrl != null && this.TermsOfServiceUrl.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TermsOfServiceUrl, length must be less than 1024.", new [] { "TermsOfServiceUrl" });
            }


            // PrivacyPolicyUrl (Object) maxLength
            if(this.PrivacyPolicyUrl != null && this.PrivacyPolicyUrl.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrivacyPolicyUrl, length must be less than 1024.", new [] { "PrivacyPolicyUrl" });
            }


            // WebhookUsername (Object) maxLength
            if(this.WebhookUsername != null && this.WebhookUsername.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WebhookUsername, length must be less than 255.", new [] { "WebhookUsername" });
            }


            // WebhookPassword (Object) maxLength
            if(this.WebhookPassword != null && this.WebhookPassword.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WebhookPassword, length must be less than 255.", new [] { "WebhookPassword" });
            }


            // WebhookTokenName (Object) maxLength
            if(this.WebhookTokenName != null && this.WebhookTokenName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WebhookTokenName, length must be less than 255.", new [] { "WebhookTokenName" });
            }


            // WebhookToken (Object) maxLength
            if(this.WebhookToken != null && this.WebhookToken.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WebhookToken, length must be less than 255.", new [] { "WebhookToken" });
            }


            yield break;
        }
    }

}
